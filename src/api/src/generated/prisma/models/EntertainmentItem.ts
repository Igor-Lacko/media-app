
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EntertainmentItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model EntertainmentItem
 * 
 */
export type EntertainmentItemModel = runtime.Types.Result.DefaultSelection<Prisma.$EntertainmentItemPayload>

export type AggregateEntertainmentItem = {
  _count: EntertainmentItemCountAggregateOutputType | null
  _avg: EntertainmentItemAvgAggregateOutputType | null
  _sum: EntertainmentItemSumAggregateOutputType | null
  _min: EntertainmentItemMinAggregateOutputType | null
  _max: EntertainmentItemMaxAggregateOutputType | null
}

export type EntertainmentItemAvgAggregateOutputType = {
  id: number | null
  rating: number | null
  mediaId: number | null
}

export type EntertainmentItemSumAggregateOutputType = {
  id: number | null
  rating: number | null
  mediaId: number | null
}

export type EntertainmentItemMinAggregateOutputType = {
  id: number | null
  watchStatus: $Enums.WatchStatus | null
  rating: number | null
  shortDescription: string | null
  description: string | null
  thumbnailUrl: string | null
  isFavorite: boolean | null
  toWatch: boolean | null
  mediaId: number | null
}

export type EntertainmentItemMaxAggregateOutputType = {
  id: number | null
  watchStatus: $Enums.WatchStatus | null
  rating: number | null
  shortDescription: string | null
  description: string | null
  thumbnailUrl: string | null
  isFavorite: boolean | null
  toWatch: boolean | null
  mediaId: number | null
}

export type EntertainmentItemCountAggregateOutputType = {
  id: number
  watchStatus: number
  rating: number
  shortDescription: number
  description: number
  thumbnailUrl: number
  isFavorite: number
  toWatch: number
  mediaId: number
  _all: number
}


export type EntertainmentItemAvgAggregateInputType = {
  id?: true
  rating?: true
  mediaId?: true
}

export type EntertainmentItemSumAggregateInputType = {
  id?: true
  rating?: true
  mediaId?: true
}

export type EntertainmentItemMinAggregateInputType = {
  id?: true
  watchStatus?: true
  rating?: true
  shortDescription?: true
  description?: true
  thumbnailUrl?: true
  isFavorite?: true
  toWatch?: true
  mediaId?: true
}

export type EntertainmentItemMaxAggregateInputType = {
  id?: true
  watchStatus?: true
  rating?: true
  shortDescription?: true
  description?: true
  thumbnailUrl?: true
  isFavorite?: true
  toWatch?: true
  mediaId?: true
}

export type EntertainmentItemCountAggregateInputType = {
  id?: true
  watchStatus?: true
  rating?: true
  shortDescription?: true
  description?: true
  thumbnailUrl?: true
  isFavorite?: true
  toWatch?: true
  mediaId?: true
  _all?: true
}

export type EntertainmentItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EntertainmentItem to aggregate.
   */
  where?: Prisma.EntertainmentItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentItems to fetch.
   */
  orderBy?: Prisma.EntertainmentItemOrderByWithRelationInput | Prisma.EntertainmentItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EntertainmentItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EntertainmentItems
  **/
  _count?: true | EntertainmentItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EntertainmentItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EntertainmentItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EntertainmentItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EntertainmentItemMaxAggregateInputType
}

export type GetEntertainmentItemAggregateType<T extends EntertainmentItemAggregateArgs> = {
      [P in keyof T & keyof AggregateEntertainmentItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEntertainmentItem[P]>
    : Prisma.GetScalarType<T[P], AggregateEntertainmentItem[P]>
}




export type EntertainmentItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EntertainmentItemWhereInput
  orderBy?: Prisma.EntertainmentItemOrderByWithAggregationInput | Prisma.EntertainmentItemOrderByWithAggregationInput[]
  by: Prisma.EntertainmentItemScalarFieldEnum[] | Prisma.EntertainmentItemScalarFieldEnum
  having?: Prisma.EntertainmentItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EntertainmentItemCountAggregateInputType | true
  _avg?: EntertainmentItemAvgAggregateInputType
  _sum?: EntertainmentItemSumAggregateInputType
  _min?: EntertainmentItemMinAggregateInputType
  _max?: EntertainmentItemMaxAggregateInputType
}

export type EntertainmentItemGroupByOutputType = {
  id: number
  watchStatus: $Enums.WatchStatus
  rating: number | null
  shortDescription: string | null
  description: string | null
  thumbnailUrl: string | null
  isFavorite: boolean
  toWatch: boolean
  mediaId: number
  _count: EntertainmentItemCountAggregateOutputType | null
  _avg: EntertainmentItemAvgAggregateOutputType | null
  _sum: EntertainmentItemSumAggregateOutputType | null
  _min: EntertainmentItemMinAggregateOutputType | null
  _max: EntertainmentItemMaxAggregateOutputType | null
}

type GetEntertainmentItemGroupByPayload<T extends EntertainmentItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EntertainmentItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EntertainmentItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EntertainmentItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EntertainmentItemGroupByOutputType[P]>
      }
    >
  > 



export type EntertainmentItemWhereInput = {
  AND?: Prisma.EntertainmentItemWhereInput | Prisma.EntertainmentItemWhereInput[]
  OR?: Prisma.EntertainmentItemWhereInput[]
  NOT?: Prisma.EntertainmentItemWhereInput | Prisma.EntertainmentItemWhereInput[]
  id?: Prisma.IntFilter<"EntertainmentItem"> | number
  watchStatus?: Prisma.EnumWatchStatusFilter<"EntertainmentItem"> | $Enums.WatchStatus
  rating?: Prisma.FloatNullableFilter<"EntertainmentItem"> | number | null
  shortDescription?: Prisma.StringNullableFilter<"EntertainmentItem"> | string | null
  description?: Prisma.StringNullableFilter<"EntertainmentItem"> | string | null
  thumbnailUrl?: Prisma.StringNullableFilter<"EntertainmentItem"> | string | null
  isFavorite?: Prisma.BoolFilter<"EntertainmentItem"> | boolean
  toWatch?: Prisma.BoolFilter<"EntertainmentItem"> | boolean
  mediaId?: Prisma.IntFilter<"EntertainmentItem"> | number
  genres?: Prisma.EntertainmentGenreListRelationFilter
  media?: Prisma.XOR<Prisma.MediaScalarRelationFilter, Prisma.MediaWhereInput>
  movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
  show?: Prisma.XOR<Prisma.ShowNullableScalarRelationFilter, Prisma.ShowWhereInput> | null
}

export type EntertainmentItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  rating?: Prisma.SortOrderInput | Prisma.SortOrder
  shortDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  toWatch?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
  genres?: Prisma.EntertainmentGenreOrderByRelationAggregateInput
  media?: Prisma.MediaOrderByWithRelationInput
  movie?: Prisma.MovieOrderByWithRelationInput
  show?: Prisma.ShowOrderByWithRelationInput
}

export type EntertainmentItemWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  mediaId?: number
  AND?: Prisma.EntertainmentItemWhereInput | Prisma.EntertainmentItemWhereInput[]
  OR?: Prisma.EntertainmentItemWhereInput[]
  NOT?: Prisma.EntertainmentItemWhereInput | Prisma.EntertainmentItemWhereInput[]
  watchStatus?: Prisma.EnumWatchStatusFilter<"EntertainmentItem"> | $Enums.WatchStatus
  rating?: Prisma.FloatNullableFilter<"EntertainmentItem"> | number | null
  shortDescription?: Prisma.StringNullableFilter<"EntertainmentItem"> | string | null
  description?: Prisma.StringNullableFilter<"EntertainmentItem"> | string | null
  thumbnailUrl?: Prisma.StringNullableFilter<"EntertainmentItem"> | string | null
  isFavorite?: Prisma.BoolFilter<"EntertainmentItem"> | boolean
  toWatch?: Prisma.BoolFilter<"EntertainmentItem"> | boolean
  genres?: Prisma.EntertainmentGenreListRelationFilter
  media?: Prisma.XOR<Prisma.MediaScalarRelationFilter, Prisma.MediaWhereInput>
  movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
  show?: Prisma.XOR<Prisma.ShowNullableScalarRelationFilter, Prisma.ShowWhereInput> | null
}, "id" | "mediaId">

export type EntertainmentItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  rating?: Prisma.SortOrderInput | Prisma.SortOrder
  shortDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  toWatch?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
  _count?: Prisma.EntertainmentItemCountOrderByAggregateInput
  _avg?: Prisma.EntertainmentItemAvgOrderByAggregateInput
  _max?: Prisma.EntertainmentItemMaxOrderByAggregateInput
  _min?: Prisma.EntertainmentItemMinOrderByAggregateInput
  _sum?: Prisma.EntertainmentItemSumOrderByAggregateInput
}

export type EntertainmentItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.EntertainmentItemScalarWhereWithAggregatesInput | Prisma.EntertainmentItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.EntertainmentItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EntertainmentItemScalarWhereWithAggregatesInput | Prisma.EntertainmentItemScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EntertainmentItem"> | number
  watchStatus?: Prisma.EnumWatchStatusWithAggregatesFilter<"EntertainmentItem"> | $Enums.WatchStatus
  rating?: Prisma.FloatNullableWithAggregatesFilter<"EntertainmentItem"> | number | null
  shortDescription?: Prisma.StringNullableWithAggregatesFilter<"EntertainmentItem"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"EntertainmentItem"> | string | null
  thumbnailUrl?: Prisma.StringNullableWithAggregatesFilter<"EntertainmentItem"> | string | null
  isFavorite?: Prisma.BoolWithAggregatesFilter<"EntertainmentItem"> | boolean
  toWatch?: Prisma.BoolWithAggregatesFilter<"EntertainmentItem"> | boolean
  mediaId?: Prisma.IntWithAggregatesFilter<"EntertainmentItem"> | number
}

export type EntertainmentItemCreateInput = {
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  genres?: Prisma.EntertainmentGenreCreateNestedManyWithoutEntertainmentItemInput
  media: Prisma.MediaCreateNestedOneWithoutEntertainmentItemInput
  movie?: Prisma.MovieCreateNestedOneWithoutEntertainmentItemInput
  show?: Prisma.ShowCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemUncheckedCreateInput = {
  id?: number
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  mediaId: number
  genres?: Prisma.EntertainmentGenreUncheckedCreateNestedManyWithoutEntertainmentItemInput
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutEntertainmentItemInput
  show?: Prisma.ShowUncheckedCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemUpdateInput = {
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genres?: Prisma.EntertainmentGenreUpdateManyWithoutEntertainmentItemNestedInput
  media?: Prisma.MediaUpdateOneRequiredWithoutEntertainmentItemNestedInput
  movie?: Prisma.MovieUpdateOneWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  genres?: Prisma.EntertainmentGenreUncheckedUpdateManyWithoutEntertainmentItemNestedInput
  movie?: Prisma.MovieUncheckedUpdateOneWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUncheckedUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemCreateManyInput = {
  id?: number
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  mediaId: number
}

export type EntertainmentItemUpdateManyMutationInput = {
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type EntertainmentItemUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type EntertainmentItemNullableScalarRelationFilter = {
  is?: Prisma.EntertainmentItemWhereInput | null
  isNot?: Prisma.EntertainmentItemWhereInput | null
}

export type EntertainmentItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  shortDescription?: Prisma.SortOrder
  description?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  toWatch?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type EntertainmentItemAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type EntertainmentItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  shortDescription?: Prisma.SortOrder
  description?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  toWatch?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type EntertainmentItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  shortDescription?: Prisma.SortOrder
  description?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  toWatch?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type EntertainmentItemSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type EntertainmentItemScalarRelationFilter = {
  is?: Prisma.EntertainmentItemWhereInput
  isNot?: Prisma.EntertainmentItemWhereInput
}

export type EntertainmentItemCreateNestedOneWithoutMediaInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMediaInput, Prisma.EntertainmentItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutMediaInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
}

export type EntertainmentItemUncheckedCreateNestedOneWithoutMediaInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMediaInput, Prisma.EntertainmentItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutMediaInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
}

export type EntertainmentItemUpdateOneWithoutMediaNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMediaInput, Prisma.EntertainmentItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutMediaInput
  upsert?: Prisma.EntertainmentItemUpsertWithoutMediaInput
  disconnect?: Prisma.EntertainmentItemWhereInput | boolean
  delete?: Prisma.EntertainmentItemWhereInput | boolean
  connect?: Prisma.EntertainmentItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EntertainmentItemUpdateToOneWithWhereWithoutMediaInput, Prisma.EntertainmentItemUpdateWithoutMediaInput>, Prisma.EntertainmentItemUncheckedUpdateWithoutMediaInput>
}

export type EntertainmentItemUncheckedUpdateOneWithoutMediaNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMediaInput, Prisma.EntertainmentItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutMediaInput
  upsert?: Prisma.EntertainmentItemUpsertWithoutMediaInput
  disconnect?: Prisma.EntertainmentItemWhereInput | boolean
  delete?: Prisma.EntertainmentItemWhereInput | boolean
  connect?: Prisma.EntertainmentItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EntertainmentItemUpdateToOneWithWhereWithoutMediaInput, Prisma.EntertainmentItemUpdateWithoutMediaInput>, Prisma.EntertainmentItemUncheckedUpdateWithoutMediaInput>
}

export type EnumWatchStatusFieldUpdateOperationsInput = {
  set?: $Enums.WatchStatus
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type EntertainmentItemCreateNestedOneWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMovieInput, Prisma.EntertainmentItemUncheckedCreateWithoutMovieInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutMovieInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
}

export type EntertainmentItemUpdateOneRequiredWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMovieInput, Prisma.EntertainmentItemUncheckedCreateWithoutMovieInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutMovieInput
  upsert?: Prisma.EntertainmentItemUpsertWithoutMovieInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EntertainmentItemUpdateToOneWithWhereWithoutMovieInput, Prisma.EntertainmentItemUpdateWithoutMovieInput>, Prisma.EntertainmentItemUncheckedUpdateWithoutMovieInput>
}

export type EntertainmentItemCreateNestedOneWithoutShowInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutShowInput, Prisma.EntertainmentItemUncheckedCreateWithoutShowInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutShowInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
}

export type EntertainmentItemUpdateOneRequiredWithoutShowNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutShowInput, Prisma.EntertainmentItemUncheckedCreateWithoutShowInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutShowInput
  upsert?: Prisma.EntertainmentItemUpsertWithoutShowInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EntertainmentItemUpdateToOneWithWhereWithoutShowInput, Prisma.EntertainmentItemUpdateWithoutShowInput>, Prisma.EntertainmentItemUncheckedUpdateWithoutShowInput>
}

export type EntertainmentItemCreateNestedOneWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutGenresInput, Prisma.EntertainmentItemUncheckedCreateWithoutGenresInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutGenresInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
}

export type EntertainmentItemUpdateOneRequiredWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutGenresInput, Prisma.EntertainmentItemUncheckedCreateWithoutGenresInput>
  connectOrCreate?: Prisma.EntertainmentItemCreateOrConnectWithoutGenresInput
  upsert?: Prisma.EntertainmentItemUpsertWithoutGenresInput
  connect?: Prisma.EntertainmentItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EntertainmentItemUpdateToOneWithWhereWithoutGenresInput, Prisma.EntertainmentItemUpdateWithoutGenresInput>, Prisma.EntertainmentItemUncheckedUpdateWithoutGenresInput>
}

export type EntertainmentItemCreateWithoutMediaInput = {
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  genres?: Prisma.EntertainmentGenreCreateNestedManyWithoutEntertainmentItemInput
  movie?: Prisma.MovieCreateNestedOneWithoutEntertainmentItemInput
  show?: Prisma.ShowCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemUncheckedCreateWithoutMediaInput = {
  id?: number
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  genres?: Prisma.EntertainmentGenreUncheckedCreateNestedManyWithoutEntertainmentItemInput
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutEntertainmentItemInput
  show?: Prisma.ShowUncheckedCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemCreateOrConnectWithoutMediaInput = {
  where: Prisma.EntertainmentItemWhereUniqueInput
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMediaInput, Prisma.EntertainmentItemUncheckedCreateWithoutMediaInput>
}

export type EntertainmentItemUpsertWithoutMediaInput = {
  update: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutMediaInput, Prisma.EntertainmentItemUncheckedUpdateWithoutMediaInput>
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMediaInput, Prisma.EntertainmentItemUncheckedCreateWithoutMediaInput>
  where?: Prisma.EntertainmentItemWhereInput
}

export type EntertainmentItemUpdateToOneWithWhereWithoutMediaInput = {
  where?: Prisma.EntertainmentItemWhereInput
  data: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutMediaInput, Prisma.EntertainmentItemUncheckedUpdateWithoutMediaInput>
}

export type EntertainmentItemUpdateWithoutMediaInput = {
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genres?: Prisma.EntertainmentGenreUpdateManyWithoutEntertainmentItemNestedInput
  movie?: Prisma.MovieUpdateOneWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemUncheckedUpdateWithoutMediaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genres?: Prisma.EntertainmentGenreUncheckedUpdateManyWithoutEntertainmentItemNestedInput
  movie?: Prisma.MovieUncheckedUpdateOneWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUncheckedUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemCreateWithoutMovieInput = {
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  genres?: Prisma.EntertainmentGenreCreateNestedManyWithoutEntertainmentItemInput
  media: Prisma.MediaCreateNestedOneWithoutEntertainmentItemInput
  show?: Prisma.ShowCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemUncheckedCreateWithoutMovieInput = {
  id?: number
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  mediaId: number
  genres?: Prisma.EntertainmentGenreUncheckedCreateNestedManyWithoutEntertainmentItemInput
  show?: Prisma.ShowUncheckedCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemCreateOrConnectWithoutMovieInput = {
  where: Prisma.EntertainmentItemWhereUniqueInput
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMovieInput, Prisma.EntertainmentItemUncheckedCreateWithoutMovieInput>
}

export type EntertainmentItemUpsertWithoutMovieInput = {
  update: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutMovieInput, Prisma.EntertainmentItemUncheckedUpdateWithoutMovieInput>
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutMovieInput, Prisma.EntertainmentItemUncheckedCreateWithoutMovieInput>
  where?: Prisma.EntertainmentItemWhereInput
}

export type EntertainmentItemUpdateToOneWithWhereWithoutMovieInput = {
  where?: Prisma.EntertainmentItemWhereInput
  data: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutMovieInput, Prisma.EntertainmentItemUncheckedUpdateWithoutMovieInput>
}

export type EntertainmentItemUpdateWithoutMovieInput = {
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genres?: Prisma.EntertainmentGenreUpdateManyWithoutEntertainmentItemNestedInput
  media?: Prisma.MediaUpdateOneRequiredWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemUncheckedUpdateWithoutMovieInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  genres?: Prisma.EntertainmentGenreUncheckedUpdateManyWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUncheckedUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemCreateWithoutShowInput = {
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  genres?: Prisma.EntertainmentGenreCreateNestedManyWithoutEntertainmentItemInput
  media: Prisma.MediaCreateNestedOneWithoutEntertainmentItemInput
  movie?: Prisma.MovieCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemUncheckedCreateWithoutShowInput = {
  id?: number
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  mediaId: number
  genres?: Prisma.EntertainmentGenreUncheckedCreateNestedManyWithoutEntertainmentItemInput
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemCreateOrConnectWithoutShowInput = {
  where: Prisma.EntertainmentItemWhereUniqueInput
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutShowInput, Prisma.EntertainmentItemUncheckedCreateWithoutShowInput>
}

export type EntertainmentItemUpsertWithoutShowInput = {
  update: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutShowInput, Prisma.EntertainmentItemUncheckedUpdateWithoutShowInput>
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutShowInput, Prisma.EntertainmentItemUncheckedCreateWithoutShowInput>
  where?: Prisma.EntertainmentItemWhereInput
}

export type EntertainmentItemUpdateToOneWithWhereWithoutShowInput = {
  where?: Prisma.EntertainmentItemWhereInput
  data: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutShowInput, Prisma.EntertainmentItemUncheckedUpdateWithoutShowInput>
}

export type EntertainmentItemUpdateWithoutShowInput = {
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genres?: Prisma.EntertainmentGenreUpdateManyWithoutEntertainmentItemNestedInput
  media?: Prisma.MediaUpdateOneRequiredWithoutEntertainmentItemNestedInput
  movie?: Prisma.MovieUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemUncheckedUpdateWithoutShowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  genres?: Prisma.EntertainmentGenreUncheckedUpdateManyWithoutEntertainmentItemNestedInput
  movie?: Prisma.MovieUncheckedUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemCreateWithoutGenresInput = {
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  media: Prisma.MediaCreateNestedOneWithoutEntertainmentItemInput
  movie?: Prisma.MovieCreateNestedOneWithoutEntertainmentItemInput
  show?: Prisma.ShowCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemUncheckedCreateWithoutGenresInput = {
  id?: number
  watchStatus?: $Enums.WatchStatus
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  toWatch?: boolean
  mediaId: number
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutEntertainmentItemInput
  show?: Prisma.ShowUncheckedCreateNestedOneWithoutEntertainmentItemInput
}

export type EntertainmentItemCreateOrConnectWithoutGenresInput = {
  where: Prisma.EntertainmentItemWhereUniqueInput
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutGenresInput, Prisma.EntertainmentItemUncheckedCreateWithoutGenresInput>
}

export type EntertainmentItemUpsertWithoutGenresInput = {
  update: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutGenresInput, Prisma.EntertainmentItemUncheckedUpdateWithoutGenresInput>
  create: Prisma.XOR<Prisma.EntertainmentItemCreateWithoutGenresInput, Prisma.EntertainmentItemUncheckedCreateWithoutGenresInput>
  where?: Prisma.EntertainmentItemWhereInput
}

export type EntertainmentItemUpdateToOneWithWhereWithoutGenresInput = {
  where?: Prisma.EntertainmentItemWhereInput
  data: Prisma.XOR<Prisma.EntertainmentItemUpdateWithoutGenresInput, Prisma.EntertainmentItemUncheckedUpdateWithoutGenresInput>
}

export type EntertainmentItemUpdateWithoutGenresInput = {
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  media?: Prisma.MediaUpdateOneRequiredWithoutEntertainmentItemNestedInput
  movie?: Prisma.MovieUpdateOneWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUpdateOneWithoutEntertainmentItemNestedInput
}

export type EntertainmentItemUncheckedUpdateWithoutGenresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  toWatch?: Prisma.BoolFieldUpdateOperationsInput | boolean
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  movie?: Prisma.MovieUncheckedUpdateOneWithoutEntertainmentItemNestedInput
  show?: Prisma.ShowUncheckedUpdateOneWithoutEntertainmentItemNestedInput
}


/**
 * Count Type EntertainmentItemCountOutputType
 */

export type EntertainmentItemCountOutputType = {
  genres: number
}

export type EntertainmentItemCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  genres?: boolean | EntertainmentItemCountOutputTypeCountGenresArgs
}

/**
 * EntertainmentItemCountOutputType without action
 */
export type EntertainmentItemCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItemCountOutputType
   */
  select?: Prisma.EntertainmentItemCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EntertainmentItemCountOutputType without action
 */
export type EntertainmentItemCountOutputTypeCountGenresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EntertainmentGenreWhereInput
}


export type EntertainmentItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  watchStatus?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  toWatch?: boolean
  mediaId?: boolean
  genres?: boolean | Prisma.EntertainmentItem$genresArgs<ExtArgs>
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.EntertainmentItem$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentItem$showArgs<ExtArgs>
  _count?: boolean | Prisma.EntertainmentItemCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["entertainmentItem"]>

export type EntertainmentItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  watchStatus?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  toWatch?: boolean
  mediaId?: boolean
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["entertainmentItem"]>

export type EntertainmentItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  watchStatus?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  toWatch?: boolean
  mediaId?: boolean
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["entertainmentItem"]>

export type EntertainmentItemSelectScalar = {
  id?: boolean
  watchStatus?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  toWatch?: boolean
  mediaId?: boolean
}

export type EntertainmentItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "watchStatus" | "rating" | "shortDescription" | "description" | "thumbnailUrl" | "isFavorite" | "toWatch" | "mediaId", ExtArgs["result"]["entertainmentItem"]>
export type EntertainmentItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  genres?: boolean | Prisma.EntertainmentItem$genresArgs<ExtArgs>
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.EntertainmentItem$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentItem$showArgs<ExtArgs>
  _count?: boolean | Prisma.EntertainmentItemCountOutputTypeDefaultArgs<ExtArgs>
}
export type EntertainmentItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}
export type EntertainmentItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}

export type $EntertainmentItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EntertainmentItem"
  objects: {
    genres: Prisma.$EntertainmentGenrePayload<ExtArgs>[]
    media: Prisma.$MediaPayload<ExtArgs>
    movie: Prisma.$MoviePayload<ExtArgs> | null
    show: Prisma.$ShowPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    watchStatus: $Enums.WatchStatus
    rating: number | null
    shortDescription: string | null
    description: string | null
    thumbnailUrl: string | null
    isFavorite: boolean
    toWatch: boolean
    mediaId: number
  }, ExtArgs["result"]["entertainmentItem"]>
  composites: {}
}

export type EntertainmentItemGetPayload<S extends boolean | null | undefined | EntertainmentItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload, S>

export type EntertainmentItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EntertainmentItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EntertainmentItemCountAggregateInputType | true
  }

export interface EntertainmentItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EntertainmentItem'], meta: { name: 'EntertainmentItem' } }
  /**
   * Find zero or one EntertainmentItem that matches the filter.
   * @param {EntertainmentItemFindUniqueArgs} args - Arguments to find a EntertainmentItem
   * @example
   * // Get one EntertainmentItem
   * const entertainmentItem = await prisma.entertainmentItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EntertainmentItemFindUniqueArgs>(args: Prisma.SelectSubset<T, EntertainmentItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EntertainmentItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EntertainmentItemFindUniqueOrThrowArgs} args - Arguments to find a EntertainmentItem
   * @example
   * // Get one EntertainmentItem
   * const entertainmentItem = await prisma.entertainmentItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EntertainmentItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EntertainmentItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EntertainmentItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentItemFindFirstArgs} args - Arguments to find a EntertainmentItem
   * @example
   * // Get one EntertainmentItem
   * const entertainmentItem = await prisma.entertainmentItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EntertainmentItemFindFirstArgs>(args?: Prisma.SelectSubset<T, EntertainmentItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EntertainmentItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentItemFindFirstOrThrowArgs} args - Arguments to find a EntertainmentItem
   * @example
   * // Get one EntertainmentItem
   * const entertainmentItem = await prisma.entertainmentItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EntertainmentItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EntertainmentItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EntertainmentItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EntertainmentItems
   * const entertainmentItems = await prisma.entertainmentItem.findMany()
   * 
   * // Get first 10 EntertainmentItems
   * const entertainmentItems = await prisma.entertainmentItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const entertainmentItemWithIdOnly = await prisma.entertainmentItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EntertainmentItemFindManyArgs>(args?: Prisma.SelectSubset<T, EntertainmentItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EntertainmentItem.
   * @param {EntertainmentItemCreateArgs} args - Arguments to create a EntertainmentItem.
   * @example
   * // Create one EntertainmentItem
   * const EntertainmentItem = await prisma.entertainmentItem.create({
   *   data: {
   *     // ... data to create a EntertainmentItem
   *   }
   * })
   * 
   */
  create<T extends EntertainmentItemCreateArgs>(args: Prisma.SelectSubset<T, EntertainmentItemCreateArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EntertainmentItems.
   * @param {EntertainmentItemCreateManyArgs} args - Arguments to create many EntertainmentItems.
   * @example
   * // Create many EntertainmentItems
   * const entertainmentItem = await prisma.entertainmentItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EntertainmentItemCreateManyArgs>(args?: Prisma.SelectSubset<T, EntertainmentItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EntertainmentItems and returns the data saved in the database.
   * @param {EntertainmentItemCreateManyAndReturnArgs} args - Arguments to create many EntertainmentItems.
   * @example
   * // Create many EntertainmentItems
   * const entertainmentItem = await prisma.entertainmentItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EntertainmentItems and only return the `id`
   * const entertainmentItemWithIdOnly = await prisma.entertainmentItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EntertainmentItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EntertainmentItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EntertainmentItem.
   * @param {EntertainmentItemDeleteArgs} args - Arguments to delete one EntertainmentItem.
   * @example
   * // Delete one EntertainmentItem
   * const EntertainmentItem = await prisma.entertainmentItem.delete({
   *   where: {
   *     // ... filter to delete one EntertainmentItem
   *   }
   * })
   * 
   */
  delete<T extends EntertainmentItemDeleteArgs>(args: Prisma.SelectSubset<T, EntertainmentItemDeleteArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EntertainmentItem.
   * @param {EntertainmentItemUpdateArgs} args - Arguments to update one EntertainmentItem.
   * @example
   * // Update one EntertainmentItem
   * const entertainmentItem = await prisma.entertainmentItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EntertainmentItemUpdateArgs>(args: Prisma.SelectSubset<T, EntertainmentItemUpdateArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EntertainmentItems.
   * @param {EntertainmentItemDeleteManyArgs} args - Arguments to filter EntertainmentItems to delete.
   * @example
   * // Delete a few EntertainmentItems
   * const { count } = await prisma.entertainmentItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EntertainmentItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, EntertainmentItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EntertainmentItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EntertainmentItems
   * const entertainmentItem = await prisma.entertainmentItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EntertainmentItemUpdateManyArgs>(args: Prisma.SelectSubset<T, EntertainmentItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EntertainmentItems and returns the data updated in the database.
   * @param {EntertainmentItemUpdateManyAndReturnArgs} args - Arguments to update many EntertainmentItems.
   * @example
   * // Update many EntertainmentItems
   * const entertainmentItem = await prisma.entertainmentItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EntertainmentItems and only return the `id`
   * const entertainmentItemWithIdOnly = await prisma.entertainmentItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EntertainmentItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EntertainmentItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EntertainmentItem.
   * @param {EntertainmentItemUpsertArgs} args - Arguments to update or create a EntertainmentItem.
   * @example
   * // Update or create a EntertainmentItem
   * const entertainmentItem = await prisma.entertainmentItem.upsert({
   *   create: {
   *     // ... data to create a EntertainmentItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EntertainmentItem we want to update
   *   }
   * })
   */
  upsert<T extends EntertainmentItemUpsertArgs>(args: Prisma.SelectSubset<T, EntertainmentItemUpsertArgs<ExtArgs>>): Prisma.Prisma__EntertainmentItemClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EntertainmentItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentItemCountArgs} args - Arguments to filter EntertainmentItems to count.
   * @example
   * // Count the number of EntertainmentItems
   * const count = await prisma.entertainmentItem.count({
   *   where: {
   *     // ... the filter for the EntertainmentItems we want to count
   *   }
   * })
  **/
  count<T extends EntertainmentItemCountArgs>(
    args?: Prisma.Subset<T, EntertainmentItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EntertainmentItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EntertainmentItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EntertainmentItemAggregateArgs>(args: Prisma.Subset<T, EntertainmentItemAggregateArgs>): Prisma.PrismaPromise<GetEntertainmentItemAggregateType<T>>

  /**
   * Group by EntertainmentItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EntertainmentItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EntertainmentItemGroupByArgs['orderBy'] }
      : { orderBy?: EntertainmentItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EntertainmentItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntertainmentItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EntertainmentItem model
 */
readonly fields: EntertainmentItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EntertainmentItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EntertainmentItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  genres<T extends Prisma.EntertainmentItem$genresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EntertainmentItem$genresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  media<T extends Prisma.MediaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  movie<T extends Prisma.EntertainmentItem$movieArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EntertainmentItem$movieArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  show<T extends Prisma.EntertainmentItem$showArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EntertainmentItem$showArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EntertainmentItem model
 */
export interface EntertainmentItemFieldRefs {
  readonly id: Prisma.FieldRef<"EntertainmentItem", 'Int'>
  readonly watchStatus: Prisma.FieldRef<"EntertainmentItem", 'WatchStatus'>
  readonly rating: Prisma.FieldRef<"EntertainmentItem", 'Float'>
  readonly shortDescription: Prisma.FieldRef<"EntertainmentItem", 'String'>
  readonly description: Prisma.FieldRef<"EntertainmentItem", 'String'>
  readonly thumbnailUrl: Prisma.FieldRef<"EntertainmentItem", 'String'>
  readonly isFavorite: Prisma.FieldRef<"EntertainmentItem", 'Boolean'>
  readonly toWatch: Prisma.FieldRef<"EntertainmentItem", 'Boolean'>
  readonly mediaId: Prisma.FieldRef<"EntertainmentItem", 'Int'>
}
    

// Custom InputTypes
/**
 * EntertainmentItem findUnique
 */
export type EntertainmentItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentItem to fetch.
   */
  where: Prisma.EntertainmentItemWhereUniqueInput
}

/**
 * EntertainmentItem findUniqueOrThrow
 */
export type EntertainmentItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentItem to fetch.
   */
  where: Prisma.EntertainmentItemWhereUniqueInput
}

/**
 * EntertainmentItem findFirst
 */
export type EntertainmentItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentItem to fetch.
   */
  where?: Prisma.EntertainmentItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentItems to fetch.
   */
  orderBy?: Prisma.EntertainmentItemOrderByWithRelationInput | Prisma.EntertainmentItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EntertainmentItems.
   */
  cursor?: Prisma.EntertainmentItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EntertainmentItems.
   */
  distinct?: Prisma.EntertainmentItemScalarFieldEnum | Prisma.EntertainmentItemScalarFieldEnum[]
}

/**
 * EntertainmentItem findFirstOrThrow
 */
export type EntertainmentItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentItem to fetch.
   */
  where?: Prisma.EntertainmentItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentItems to fetch.
   */
  orderBy?: Prisma.EntertainmentItemOrderByWithRelationInput | Prisma.EntertainmentItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EntertainmentItems.
   */
  cursor?: Prisma.EntertainmentItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EntertainmentItems.
   */
  distinct?: Prisma.EntertainmentItemScalarFieldEnum | Prisma.EntertainmentItemScalarFieldEnum[]
}

/**
 * EntertainmentItem findMany
 */
export type EntertainmentItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentItems to fetch.
   */
  where?: Prisma.EntertainmentItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentItems to fetch.
   */
  orderBy?: Prisma.EntertainmentItemOrderByWithRelationInput | Prisma.EntertainmentItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EntertainmentItems.
   */
  cursor?: Prisma.EntertainmentItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentItems.
   */
  skip?: number
  distinct?: Prisma.EntertainmentItemScalarFieldEnum | Prisma.EntertainmentItemScalarFieldEnum[]
}

/**
 * EntertainmentItem create
 */
export type EntertainmentItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * The data needed to create a EntertainmentItem.
   */
  data: Prisma.XOR<Prisma.EntertainmentItemCreateInput, Prisma.EntertainmentItemUncheckedCreateInput>
}

/**
 * EntertainmentItem createMany
 */
export type EntertainmentItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EntertainmentItems.
   */
  data: Prisma.EntertainmentItemCreateManyInput | Prisma.EntertainmentItemCreateManyInput[]
}

/**
 * EntertainmentItem createManyAndReturn
 */
export type EntertainmentItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * The data used to create many EntertainmentItems.
   */
  data: Prisma.EntertainmentItemCreateManyInput | Prisma.EntertainmentItemCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EntertainmentItem update
 */
export type EntertainmentItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * The data needed to update a EntertainmentItem.
   */
  data: Prisma.XOR<Prisma.EntertainmentItemUpdateInput, Prisma.EntertainmentItemUncheckedUpdateInput>
  /**
   * Choose, which EntertainmentItem to update.
   */
  where: Prisma.EntertainmentItemWhereUniqueInput
}

/**
 * EntertainmentItem updateMany
 */
export type EntertainmentItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EntertainmentItems.
   */
  data: Prisma.XOR<Prisma.EntertainmentItemUpdateManyMutationInput, Prisma.EntertainmentItemUncheckedUpdateManyInput>
  /**
   * Filter which EntertainmentItems to update
   */
  where?: Prisma.EntertainmentItemWhereInput
  /**
   * Limit how many EntertainmentItems to update.
   */
  limit?: number
}

/**
 * EntertainmentItem updateManyAndReturn
 */
export type EntertainmentItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * The data used to update EntertainmentItems.
   */
  data: Prisma.XOR<Prisma.EntertainmentItemUpdateManyMutationInput, Prisma.EntertainmentItemUncheckedUpdateManyInput>
  /**
   * Filter which EntertainmentItems to update
   */
  where?: Prisma.EntertainmentItemWhereInput
  /**
   * Limit how many EntertainmentItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EntertainmentItem upsert
 */
export type EntertainmentItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * The filter to search for the EntertainmentItem to update in case it exists.
   */
  where: Prisma.EntertainmentItemWhereUniqueInput
  /**
   * In case the EntertainmentItem found by the `where` argument doesn't exist, create a new EntertainmentItem with this data.
   */
  create: Prisma.XOR<Prisma.EntertainmentItemCreateInput, Prisma.EntertainmentItemUncheckedCreateInput>
  /**
   * In case the EntertainmentItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EntertainmentItemUpdateInput, Prisma.EntertainmentItemUncheckedUpdateInput>
}

/**
 * EntertainmentItem delete
 */
export type EntertainmentItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
  /**
   * Filter which EntertainmentItem to delete.
   */
  where: Prisma.EntertainmentItemWhereUniqueInput
}

/**
 * EntertainmentItem deleteMany
 */
export type EntertainmentItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EntertainmentItems to delete
   */
  where?: Prisma.EntertainmentItemWhereInput
  /**
   * Limit how many EntertainmentItems to delete.
   */
  limit?: number
}

/**
 * EntertainmentItem.genres
 */
export type EntertainmentItem$genresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  where?: Prisma.EntertainmentGenreWhereInput
  orderBy?: Prisma.EntertainmentGenreOrderByWithRelationInput | Prisma.EntertainmentGenreOrderByWithRelationInput[]
  cursor?: Prisma.EntertainmentGenreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EntertainmentGenreScalarFieldEnum | Prisma.EntertainmentGenreScalarFieldEnum[]
}

/**
 * EntertainmentItem.movie
 */
export type EntertainmentItem$movieArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  where?: Prisma.MovieWhereInput
}

/**
 * EntertainmentItem.show
 */
export type EntertainmentItem$showArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  where?: Prisma.ShowWhereInput
}

/**
 * EntertainmentItem without action
 */
export type EntertainmentItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentItem
   */
  select?: Prisma.EntertainmentItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentItem
   */
  omit?: Prisma.EntertainmentItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentItemInclude<ExtArgs> | null
}
