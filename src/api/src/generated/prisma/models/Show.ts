
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Show` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Show
 * 
 */
export type ShowModel = runtime.Types.Result.DefaultSelection<Prisma.$ShowPayload>

export type AggregateShow = {
  _count: ShowCountAggregateOutputType | null
  _avg: ShowAvgAggregateOutputType | null
  _sum: ShowSumAggregateOutputType | null
  _min: ShowMinAggregateOutputType | null
  _max: ShowMaxAggregateOutputType | null
}

export type ShowAvgAggregateOutputType = {
  id: number | null
  rating: number | null
}

export type ShowSumAggregateOutputType = {
  id: number | null
  rating: number | null
}

export type ShowMinAggregateOutputType = {
  id: number | null
  title: string | null
  rating: number | null
  shortDescription: string | null
  description: string | null
  thumbnailUrl: string | null
  isFavorite: boolean | null
  watchStatus: $Enums.WatchStatus | null
}

export type ShowMaxAggregateOutputType = {
  id: number | null
  title: string | null
  rating: number | null
  shortDescription: string | null
  description: string | null
  thumbnailUrl: string | null
  isFavorite: boolean | null
  watchStatus: $Enums.WatchStatus | null
}

export type ShowCountAggregateOutputType = {
  id: number
  title: number
  rating: number
  shortDescription: number
  description: number
  thumbnailUrl: number
  isFavorite: number
  watchStatus: number
  _all: number
}


export type ShowAvgAggregateInputType = {
  id?: true
  rating?: true
}

export type ShowSumAggregateInputType = {
  id?: true
  rating?: true
}

export type ShowMinAggregateInputType = {
  id?: true
  title?: true
  rating?: true
  shortDescription?: true
  description?: true
  thumbnailUrl?: true
  isFavorite?: true
  watchStatus?: true
}

export type ShowMaxAggregateInputType = {
  id?: true
  title?: true
  rating?: true
  shortDescription?: true
  description?: true
  thumbnailUrl?: true
  isFavorite?: true
  watchStatus?: true
}

export type ShowCountAggregateInputType = {
  id?: true
  title?: true
  rating?: true
  shortDescription?: true
  description?: true
  thumbnailUrl?: true
  isFavorite?: true
  watchStatus?: true
  _all?: true
}

export type ShowAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Show to aggregate.
   */
  where?: Prisma.ShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shows to fetch.
   */
  orderBy?: Prisma.ShowOrderByWithRelationInput | Prisma.ShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Shows
  **/
  _count?: true | ShowCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ShowAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ShowSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShowMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShowMaxAggregateInputType
}

export type GetShowAggregateType<T extends ShowAggregateArgs> = {
      [P in keyof T & keyof AggregateShow]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShow[P]>
    : Prisma.GetScalarType<T[P], AggregateShow[P]>
}




export type ShowGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShowWhereInput
  orderBy?: Prisma.ShowOrderByWithAggregationInput | Prisma.ShowOrderByWithAggregationInput[]
  by: Prisma.ShowScalarFieldEnum[] | Prisma.ShowScalarFieldEnum
  having?: Prisma.ShowScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShowCountAggregateInputType | true
  _avg?: ShowAvgAggregateInputType
  _sum?: ShowSumAggregateInputType
  _min?: ShowMinAggregateInputType
  _max?: ShowMaxAggregateInputType
}

export type ShowGroupByOutputType = {
  id: number
  title: string
  rating: number | null
  shortDescription: string | null
  description: string | null
  thumbnailUrl: string | null
  isFavorite: boolean
  watchStatus: $Enums.WatchStatus
  _count: ShowCountAggregateOutputType | null
  _avg: ShowAvgAggregateOutputType | null
  _sum: ShowSumAggregateOutputType | null
  _min: ShowMinAggregateOutputType | null
  _max: ShowMaxAggregateOutputType | null
}

type GetShowGroupByPayload<T extends ShowGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShowGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShowGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShowGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShowGroupByOutputType[P]>
      }
    >
  > 



export type ShowWhereInput = {
  AND?: Prisma.ShowWhereInput | Prisma.ShowWhereInput[]
  OR?: Prisma.ShowWhereInput[]
  NOT?: Prisma.ShowWhereInput | Prisma.ShowWhereInput[]
  id?: Prisma.IntFilter<"Show"> | number
  title?: Prisma.StringFilter<"Show"> | string
  rating?: Prisma.FloatNullableFilter<"Show"> | number | null
  shortDescription?: Prisma.StringNullableFilter<"Show"> | string | null
  description?: Prisma.StringNullableFilter<"Show"> | string | null
  thumbnailUrl?: Prisma.StringNullableFilter<"Show"> | string | null
  isFavorite?: Prisma.BoolFilter<"Show"> | boolean
  watchStatus?: Prisma.EnumWatchStatusFilter<"Show"> | $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreListRelationFilter
  seasons?: Prisma.SeasonListRelationFilter
}

export type ShowOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rating?: Prisma.SortOrderInput | Prisma.SortOrder
  shortDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  genres?: Prisma.EntertainmentGenreOrderByRelationAggregateInput
  seasons?: Prisma.SeasonOrderByRelationAggregateInput
}

export type ShowWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ShowWhereInput | Prisma.ShowWhereInput[]
  OR?: Prisma.ShowWhereInput[]
  NOT?: Prisma.ShowWhereInput | Prisma.ShowWhereInput[]
  title?: Prisma.StringFilter<"Show"> | string
  rating?: Prisma.FloatNullableFilter<"Show"> | number | null
  shortDescription?: Prisma.StringNullableFilter<"Show"> | string | null
  description?: Prisma.StringNullableFilter<"Show"> | string | null
  thumbnailUrl?: Prisma.StringNullableFilter<"Show"> | string | null
  isFavorite?: Prisma.BoolFilter<"Show"> | boolean
  watchStatus?: Prisma.EnumWatchStatusFilter<"Show"> | $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreListRelationFilter
  seasons?: Prisma.SeasonListRelationFilter
}, "id">

export type ShowOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rating?: Prisma.SortOrderInput | Prisma.SortOrder
  shortDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  _count?: Prisma.ShowCountOrderByAggregateInput
  _avg?: Prisma.ShowAvgOrderByAggregateInput
  _max?: Prisma.ShowMaxOrderByAggregateInput
  _min?: Prisma.ShowMinOrderByAggregateInput
  _sum?: Prisma.ShowSumOrderByAggregateInput
}

export type ShowScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShowScalarWhereWithAggregatesInput | Prisma.ShowScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShowScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShowScalarWhereWithAggregatesInput | Prisma.ShowScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Show"> | number
  title?: Prisma.StringWithAggregatesFilter<"Show"> | string
  rating?: Prisma.FloatNullableWithAggregatesFilter<"Show"> | number | null
  shortDescription?: Prisma.StringNullableWithAggregatesFilter<"Show"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"Show"> | string | null
  thumbnailUrl?: Prisma.StringNullableWithAggregatesFilter<"Show"> | string | null
  isFavorite?: Prisma.BoolWithAggregatesFilter<"Show"> | boolean
  watchStatus?: Prisma.EnumWatchStatusWithAggregatesFilter<"Show"> | $Enums.WatchStatus
}

export type ShowCreateInput = {
  title: string
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  watchStatus?: $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreCreateNestedManyWithoutShowInput
  seasons?: Prisma.SeasonCreateNestedManyWithoutShowInput
}

export type ShowUncheckedCreateInput = {
  id?: number
  title: string
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  watchStatus?: $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreUncheckedCreateNestedManyWithoutShowInput
  seasons?: Prisma.SeasonUncheckedCreateNestedManyWithoutShowInput
}

export type ShowUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreUpdateManyWithoutShowNestedInput
  seasons?: Prisma.SeasonUpdateManyWithoutShowNestedInput
}

export type ShowUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreUncheckedUpdateManyWithoutShowNestedInput
  seasons?: Prisma.SeasonUncheckedUpdateManyWithoutShowNestedInput
}

export type ShowCreateManyInput = {
  id?: number
  title: string
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  watchStatus?: $Enums.WatchStatus
}

export type ShowUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
}

export type ShowUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
}

export type ShowCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  shortDescription?: Prisma.SortOrder
  description?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
}

export type ShowAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rating?: Prisma.SortOrder
}

export type ShowMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  shortDescription?: Prisma.SortOrder
  description?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
}

export type ShowMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  shortDescription?: Prisma.SortOrder
  description?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
}

export type ShowSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rating?: Prisma.SortOrder
}

export type ShowNullableScalarRelationFilter = {
  is?: Prisma.ShowWhereInput | null
  isNot?: Prisma.ShowWhereInput | null
}

export type ShowScalarRelationFilter = {
  is?: Prisma.ShowWhereInput
  isNot?: Prisma.ShowWhereInput
}

export type ShowCreateNestedOneWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.ShowCreateWithoutGenresInput, Prisma.ShowUncheckedCreateWithoutGenresInput>
  connectOrCreate?: Prisma.ShowCreateOrConnectWithoutGenresInput
  connect?: Prisma.ShowWhereUniqueInput
}

export type ShowUpdateOneWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.ShowCreateWithoutGenresInput, Prisma.ShowUncheckedCreateWithoutGenresInput>
  connectOrCreate?: Prisma.ShowCreateOrConnectWithoutGenresInput
  upsert?: Prisma.ShowUpsertWithoutGenresInput
  disconnect?: Prisma.ShowWhereInput | boolean
  delete?: Prisma.ShowWhereInput | boolean
  connect?: Prisma.ShowWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ShowUpdateToOneWithWhereWithoutGenresInput, Prisma.ShowUpdateWithoutGenresInput>, Prisma.ShowUncheckedUpdateWithoutGenresInput>
}

export type ShowCreateNestedOneWithoutSeasonsInput = {
  create?: Prisma.XOR<Prisma.ShowCreateWithoutSeasonsInput, Prisma.ShowUncheckedCreateWithoutSeasonsInput>
  connectOrCreate?: Prisma.ShowCreateOrConnectWithoutSeasonsInput
  connect?: Prisma.ShowWhereUniqueInput
}

export type ShowUpdateOneRequiredWithoutSeasonsNestedInput = {
  create?: Prisma.XOR<Prisma.ShowCreateWithoutSeasonsInput, Prisma.ShowUncheckedCreateWithoutSeasonsInput>
  connectOrCreate?: Prisma.ShowCreateOrConnectWithoutSeasonsInput
  upsert?: Prisma.ShowUpsertWithoutSeasonsInput
  connect?: Prisma.ShowWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ShowUpdateToOneWithWhereWithoutSeasonsInput, Prisma.ShowUpdateWithoutSeasonsInput>, Prisma.ShowUncheckedUpdateWithoutSeasonsInput>
}

export type ShowCreateWithoutGenresInput = {
  title: string
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  watchStatus?: $Enums.WatchStatus
  seasons?: Prisma.SeasonCreateNestedManyWithoutShowInput
}

export type ShowUncheckedCreateWithoutGenresInput = {
  id?: number
  title: string
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  watchStatus?: $Enums.WatchStatus
  seasons?: Prisma.SeasonUncheckedCreateNestedManyWithoutShowInput
}

export type ShowCreateOrConnectWithoutGenresInput = {
  where: Prisma.ShowWhereUniqueInput
  create: Prisma.XOR<Prisma.ShowCreateWithoutGenresInput, Prisma.ShowUncheckedCreateWithoutGenresInput>
}

export type ShowUpsertWithoutGenresInput = {
  update: Prisma.XOR<Prisma.ShowUpdateWithoutGenresInput, Prisma.ShowUncheckedUpdateWithoutGenresInput>
  create: Prisma.XOR<Prisma.ShowCreateWithoutGenresInput, Prisma.ShowUncheckedCreateWithoutGenresInput>
  where?: Prisma.ShowWhereInput
}

export type ShowUpdateToOneWithWhereWithoutGenresInput = {
  where?: Prisma.ShowWhereInput
  data: Prisma.XOR<Prisma.ShowUpdateWithoutGenresInput, Prisma.ShowUncheckedUpdateWithoutGenresInput>
}

export type ShowUpdateWithoutGenresInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  seasons?: Prisma.SeasonUpdateManyWithoutShowNestedInput
}

export type ShowUncheckedUpdateWithoutGenresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  seasons?: Prisma.SeasonUncheckedUpdateManyWithoutShowNestedInput
}

export type ShowCreateWithoutSeasonsInput = {
  title: string
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  watchStatus?: $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreCreateNestedManyWithoutShowInput
}

export type ShowUncheckedCreateWithoutSeasonsInput = {
  id?: number
  title: string
  rating?: number | null
  shortDescription?: string | null
  description?: string | null
  thumbnailUrl?: string | null
  isFavorite?: boolean
  watchStatus?: $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreUncheckedCreateNestedManyWithoutShowInput
}

export type ShowCreateOrConnectWithoutSeasonsInput = {
  where: Prisma.ShowWhereUniqueInput
  create: Prisma.XOR<Prisma.ShowCreateWithoutSeasonsInput, Prisma.ShowUncheckedCreateWithoutSeasonsInput>
}

export type ShowUpsertWithoutSeasonsInput = {
  update: Prisma.XOR<Prisma.ShowUpdateWithoutSeasonsInput, Prisma.ShowUncheckedUpdateWithoutSeasonsInput>
  create: Prisma.XOR<Prisma.ShowCreateWithoutSeasonsInput, Prisma.ShowUncheckedCreateWithoutSeasonsInput>
  where?: Prisma.ShowWhereInput
}

export type ShowUpdateToOneWithWhereWithoutSeasonsInput = {
  where?: Prisma.ShowWhereInput
  data: Prisma.XOR<Prisma.ShowUpdateWithoutSeasonsInput, Prisma.ShowUncheckedUpdateWithoutSeasonsInput>
}

export type ShowUpdateWithoutSeasonsInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreUpdateManyWithoutShowNestedInput
}

export type ShowUncheckedUpdateWithoutSeasonsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shortDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  genres?: Prisma.EntertainmentGenreUncheckedUpdateManyWithoutShowNestedInput
}


/**
 * Count Type ShowCountOutputType
 */

export type ShowCountOutputType = {
  genres: number
  seasons: number
}

export type ShowCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  genres?: boolean | ShowCountOutputTypeCountGenresArgs
  seasons?: boolean | ShowCountOutputTypeCountSeasonsArgs
}

/**
 * ShowCountOutputType without action
 */
export type ShowCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShowCountOutputType
   */
  select?: Prisma.ShowCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ShowCountOutputType without action
 */
export type ShowCountOutputTypeCountGenresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EntertainmentGenreWhereInput
}

/**
 * ShowCountOutputType without action
 */
export type ShowCountOutputTypeCountSeasonsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SeasonWhereInput
}


export type ShowSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  watchStatus?: boolean
  genres?: boolean | Prisma.Show$genresArgs<ExtArgs>
  seasons?: boolean | Prisma.Show$seasonsArgs<ExtArgs>
  _count?: boolean | Prisma.ShowCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["show"]>

export type ShowSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  watchStatus?: boolean
}, ExtArgs["result"]["show"]>

export type ShowSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  watchStatus?: boolean
}, ExtArgs["result"]["show"]>

export type ShowSelectScalar = {
  id?: boolean
  title?: boolean
  rating?: boolean
  shortDescription?: boolean
  description?: boolean
  thumbnailUrl?: boolean
  isFavorite?: boolean
  watchStatus?: boolean
}

export type ShowOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "rating" | "shortDescription" | "description" | "thumbnailUrl" | "isFavorite" | "watchStatus", ExtArgs["result"]["show"]>
export type ShowInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  genres?: boolean | Prisma.Show$genresArgs<ExtArgs>
  seasons?: boolean | Prisma.Show$seasonsArgs<ExtArgs>
  _count?: boolean | Prisma.ShowCountOutputTypeDefaultArgs<ExtArgs>
}
export type ShowIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ShowIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ShowPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Show"
  objects: {
    genres: Prisma.$EntertainmentGenrePayload<ExtArgs>[]
    seasons: Prisma.$SeasonPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    rating: number | null
    shortDescription: string | null
    description: string | null
    thumbnailUrl: string | null
    isFavorite: boolean
    watchStatus: $Enums.WatchStatus
  }, ExtArgs["result"]["show"]>
  composites: {}
}

export type ShowGetPayload<S extends boolean | null | undefined | ShowDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ShowPayload, S>

export type ShowCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShowCountAggregateInputType | true
  }

export interface ShowDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Show'], meta: { name: 'Show' } }
  /**
   * Find zero or one Show that matches the filter.
   * @param {ShowFindUniqueArgs} args - Arguments to find a Show
   * @example
   * // Get one Show
   * const show = await prisma.show.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShowFindUniqueArgs>(args: Prisma.SelectSubset<T, ShowFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Show that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShowFindUniqueOrThrowArgs} args - Arguments to find a Show
   * @example
   * // Get one Show
   * const show = await prisma.show.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShowFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShowFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Show that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShowFindFirstArgs} args - Arguments to find a Show
   * @example
   * // Get one Show
   * const show = await prisma.show.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShowFindFirstArgs>(args?: Prisma.SelectSubset<T, ShowFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Show that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShowFindFirstOrThrowArgs} args - Arguments to find a Show
   * @example
   * // Get one Show
   * const show = await prisma.show.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShowFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShowFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Shows that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShowFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shows
   * const shows = await prisma.show.findMany()
   * 
   * // Get first 10 Shows
   * const shows = await prisma.show.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const showWithIdOnly = await prisma.show.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShowFindManyArgs>(args?: Prisma.SelectSubset<T, ShowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Show.
   * @param {ShowCreateArgs} args - Arguments to create a Show.
   * @example
   * // Create one Show
   * const Show = await prisma.show.create({
   *   data: {
   *     // ... data to create a Show
   *   }
   * })
   * 
   */
  create<T extends ShowCreateArgs>(args: Prisma.SelectSubset<T, ShowCreateArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Shows.
   * @param {ShowCreateManyArgs} args - Arguments to create many Shows.
   * @example
   * // Create many Shows
   * const show = await prisma.show.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShowCreateManyArgs>(args?: Prisma.SelectSubset<T, ShowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Shows and returns the data saved in the database.
   * @param {ShowCreateManyAndReturnArgs} args - Arguments to create many Shows.
   * @example
   * // Create many Shows
   * const show = await prisma.show.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Shows and only return the `id`
   * const showWithIdOnly = await prisma.show.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ShowCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ShowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Show.
   * @param {ShowDeleteArgs} args - Arguments to delete one Show.
   * @example
   * // Delete one Show
   * const Show = await prisma.show.delete({
   *   where: {
   *     // ... filter to delete one Show
   *   }
   * })
   * 
   */
  delete<T extends ShowDeleteArgs>(args: Prisma.SelectSubset<T, ShowDeleteArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Show.
   * @param {ShowUpdateArgs} args - Arguments to update one Show.
   * @example
   * // Update one Show
   * const show = await prisma.show.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShowUpdateArgs>(args: Prisma.SelectSubset<T, ShowUpdateArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Shows.
   * @param {ShowDeleteManyArgs} args - Arguments to filter Shows to delete.
   * @example
   * // Delete a few Shows
   * const { count } = await prisma.show.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShowDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShowUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shows
   * const show = await prisma.show.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShowUpdateManyArgs>(args: Prisma.SelectSubset<T, ShowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shows and returns the data updated in the database.
   * @param {ShowUpdateManyAndReturnArgs} args - Arguments to update many Shows.
   * @example
   * // Update many Shows
   * const show = await prisma.show.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Shows and only return the `id`
   * const showWithIdOnly = await prisma.show.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ShowUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ShowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Show.
   * @param {ShowUpsertArgs} args - Arguments to update or create a Show.
   * @example
   * // Update or create a Show
   * const show = await prisma.show.upsert({
   *   create: {
   *     // ... data to create a Show
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Show we want to update
   *   }
   * })
   */
  upsert<T extends ShowUpsertArgs>(args: Prisma.SelectSubset<T, ShowUpsertArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Shows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShowCountArgs} args - Arguments to filter Shows to count.
   * @example
   * // Count the number of Shows
   * const count = await prisma.show.count({
   *   where: {
   *     // ... the filter for the Shows we want to count
   *   }
   * })
  **/
  count<T extends ShowCountArgs>(
    args?: Prisma.Subset<T, ShowCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShowCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Show.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShowAggregateArgs>(args: Prisma.Subset<T, ShowAggregateArgs>): Prisma.PrismaPromise<GetShowAggregateType<T>>

  /**
   * Group by Show.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShowGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShowGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShowGroupByArgs['orderBy'] }
      : { orderBy?: ShowGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Show model
 */
readonly fields: ShowFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Show.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShowClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  genres<T extends Prisma.Show$genresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Show$genresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  seasons<T extends Prisma.Show$seasonsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Show$seasonsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Show model
 */
export interface ShowFieldRefs {
  readonly id: Prisma.FieldRef<"Show", 'Int'>
  readonly title: Prisma.FieldRef<"Show", 'String'>
  readonly rating: Prisma.FieldRef<"Show", 'Float'>
  readonly shortDescription: Prisma.FieldRef<"Show", 'String'>
  readonly description: Prisma.FieldRef<"Show", 'String'>
  readonly thumbnailUrl: Prisma.FieldRef<"Show", 'String'>
  readonly isFavorite: Prisma.FieldRef<"Show", 'Boolean'>
  readonly watchStatus: Prisma.FieldRef<"Show", 'WatchStatus'>
}
    

// Custom InputTypes
/**
 * Show findUnique
 */
export type ShowFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * Filter, which Show to fetch.
   */
  where: Prisma.ShowWhereUniqueInput
}

/**
 * Show findUniqueOrThrow
 */
export type ShowFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * Filter, which Show to fetch.
   */
  where: Prisma.ShowWhereUniqueInput
}

/**
 * Show findFirst
 */
export type ShowFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * Filter, which Show to fetch.
   */
  where?: Prisma.ShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shows to fetch.
   */
  orderBy?: Prisma.ShowOrderByWithRelationInput | Prisma.ShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shows.
   */
  cursor?: Prisma.ShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shows.
   */
  distinct?: Prisma.ShowScalarFieldEnum | Prisma.ShowScalarFieldEnum[]
}

/**
 * Show findFirstOrThrow
 */
export type ShowFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * Filter, which Show to fetch.
   */
  where?: Prisma.ShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shows to fetch.
   */
  orderBy?: Prisma.ShowOrderByWithRelationInput | Prisma.ShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shows.
   */
  cursor?: Prisma.ShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shows.
   */
  distinct?: Prisma.ShowScalarFieldEnum | Prisma.ShowScalarFieldEnum[]
}

/**
 * Show findMany
 */
export type ShowFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * Filter, which Shows to fetch.
   */
  where?: Prisma.ShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shows to fetch.
   */
  orderBy?: Prisma.ShowOrderByWithRelationInput | Prisma.ShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Shows.
   */
  cursor?: Prisma.ShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shows.
   */
  skip?: number
  distinct?: Prisma.ShowScalarFieldEnum | Prisma.ShowScalarFieldEnum[]
}

/**
 * Show create
 */
export type ShowCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * The data needed to create a Show.
   */
  data: Prisma.XOR<Prisma.ShowCreateInput, Prisma.ShowUncheckedCreateInput>
}

/**
 * Show createMany
 */
export type ShowCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Shows.
   */
  data: Prisma.ShowCreateManyInput | Prisma.ShowCreateManyInput[]
}

/**
 * Show createManyAndReturn
 */
export type ShowCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * The data used to create many Shows.
   */
  data: Prisma.ShowCreateManyInput | Prisma.ShowCreateManyInput[]
}

/**
 * Show update
 */
export type ShowUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * The data needed to update a Show.
   */
  data: Prisma.XOR<Prisma.ShowUpdateInput, Prisma.ShowUncheckedUpdateInput>
  /**
   * Choose, which Show to update.
   */
  where: Prisma.ShowWhereUniqueInput
}

/**
 * Show updateMany
 */
export type ShowUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Shows.
   */
  data: Prisma.XOR<Prisma.ShowUpdateManyMutationInput, Prisma.ShowUncheckedUpdateManyInput>
  /**
   * Filter which Shows to update
   */
  where?: Prisma.ShowWhereInput
  /**
   * Limit how many Shows to update.
   */
  limit?: number
}

/**
 * Show updateManyAndReturn
 */
export type ShowUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * The data used to update Shows.
   */
  data: Prisma.XOR<Prisma.ShowUpdateManyMutationInput, Prisma.ShowUncheckedUpdateManyInput>
  /**
   * Filter which Shows to update
   */
  where?: Prisma.ShowWhereInput
  /**
   * Limit how many Shows to update.
   */
  limit?: number
}

/**
 * Show upsert
 */
export type ShowUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * The filter to search for the Show to update in case it exists.
   */
  where: Prisma.ShowWhereUniqueInput
  /**
   * In case the Show found by the `where` argument doesn't exist, create a new Show with this data.
   */
  create: Prisma.XOR<Prisma.ShowCreateInput, Prisma.ShowUncheckedCreateInput>
  /**
   * In case the Show was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShowUpdateInput, Prisma.ShowUncheckedUpdateInput>
}

/**
 * Show delete
 */
export type ShowDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  /**
   * Filter which Show to delete.
   */
  where: Prisma.ShowWhereUniqueInput
}

/**
 * Show deleteMany
 */
export type ShowDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shows to delete
   */
  where?: Prisma.ShowWhereInput
  /**
   * Limit how many Shows to delete.
   */
  limit?: number
}

/**
 * Show.genres
 */
export type Show$genresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  where?: Prisma.EntertainmentGenreWhereInput
  orderBy?: Prisma.EntertainmentGenreOrderByWithRelationInput | Prisma.EntertainmentGenreOrderByWithRelationInput[]
  cursor?: Prisma.EntertainmentGenreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EntertainmentGenreScalarFieldEnum | Prisma.EntertainmentGenreScalarFieldEnum[]
}

/**
 * Show.seasons
 */
export type Show$seasonsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  where?: Prisma.SeasonWhereInput
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  cursor?: Prisma.SeasonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SeasonScalarFieldEnum | Prisma.SeasonScalarFieldEnum[]
}

/**
 * Show without action
 */
export type ShowDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
}
