
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Lecture` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Lecture
 * 
 */
export type LectureModel = runtime.Types.Result.DefaultSelection<Prisma.$LecturePayload>

export type AggregateLecture = {
  _count: LectureCountAggregateOutputType | null
  _avg: LectureAvgAggregateOutputType | null
  _sum: LectureSumAggregateOutputType | null
  _min: LectureMinAggregateOutputType | null
  _max: LectureMaxAggregateOutputType | null
}

export type LectureAvgAggregateOutputType = {
  id: number | null
  subjectId: number | null
  length: number | null
  continueAt: number | null
}

export type LectureSumAggregateOutputType = {
  id: number | null
  subjectId: number | null
  length: number | null
  continueAt: number | null
}

export type LectureMinAggregateOutputType = {
  id: number | null
  title: string | null
  videoUrl: string | null
  subjectId: number | null
  length: number | null
  continueAt: number | null
}

export type LectureMaxAggregateOutputType = {
  id: number | null
  title: string | null
  videoUrl: string | null
  subjectId: number | null
  length: number | null
  continueAt: number | null
}

export type LectureCountAggregateOutputType = {
  id: number
  title: number
  videoUrl: number
  subjectId: number
  length: number
  continueAt: number
  _all: number
}


export type LectureAvgAggregateInputType = {
  id?: true
  subjectId?: true
  length?: true
  continueAt?: true
}

export type LectureSumAggregateInputType = {
  id?: true
  subjectId?: true
  length?: true
  continueAt?: true
}

export type LectureMinAggregateInputType = {
  id?: true
  title?: true
  videoUrl?: true
  subjectId?: true
  length?: true
  continueAt?: true
}

export type LectureMaxAggregateInputType = {
  id?: true
  title?: true
  videoUrl?: true
  subjectId?: true
  length?: true
  continueAt?: true
}

export type LectureCountAggregateInputType = {
  id?: true
  title?: true
  videoUrl?: true
  subjectId?: true
  length?: true
  continueAt?: true
  _all?: true
}

export type LectureAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lecture to aggregate.
   */
  where?: Prisma.LectureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lectures to fetch.
   */
  orderBy?: Prisma.LectureOrderByWithRelationInput | Prisma.LectureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LectureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lectures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lectures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Lectures
  **/
  _count?: true | LectureCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LectureAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LectureSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LectureMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LectureMaxAggregateInputType
}

export type GetLectureAggregateType<T extends LectureAggregateArgs> = {
      [P in keyof T & keyof AggregateLecture]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLecture[P]>
    : Prisma.GetScalarType<T[P], AggregateLecture[P]>
}




export type LectureGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LectureWhereInput
  orderBy?: Prisma.LectureOrderByWithAggregationInput | Prisma.LectureOrderByWithAggregationInput[]
  by: Prisma.LectureScalarFieldEnum[] | Prisma.LectureScalarFieldEnum
  having?: Prisma.LectureScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LectureCountAggregateInputType | true
  _avg?: LectureAvgAggregateInputType
  _sum?: LectureSumAggregateInputType
  _min?: LectureMinAggregateInputType
  _max?: LectureMaxAggregateInputType
}

export type LectureGroupByOutputType = {
  id: number
  title: string
  videoUrl: string | null
  subjectId: number
  length: number | null
  continueAt: number | null
  _count: LectureCountAggregateOutputType | null
  _avg: LectureAvgAggregateOutputType | null
  _sum: LectureSumAggregateOutputType | null
  _min: LectureMinAggregateOutputType | null
  _max: LectureMaxAggregateOutputType | null
}

type GetLectureGroupByPayload<T extends LectureGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LectureGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LectureGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LectureGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LectureGroupByOutputType[P]>
      }
    >
  > 



export type LectureWhereInput = {
  AND?: Prisma.LectureWhereInput | Prisma.LectureWhereInput[]
  OR?: Prisma.LectureWhereInput[]
  NOT?: Prisma.LectureWhereInput | Prisma.LectureWhereInput[]
  id?: Prisma.IntFilter<"Lecture"> | number
  title?: Prisma.StringFilter<"Lecture"> | string
  videoUrl?: Prisma.StringNullableFilter<"Lecture"> | string | null
  subjectId?: Prisma.IntFilter<"Lecture"> | number
  length?: Prisma.IntNullableFilter<"Lecture"> | number | null
  continueAt?: Prisma.IntNullableFilter<"Lecture"> | number | null
  notes?: Prisma.NoteListRelationFilter
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
}

export type LectureOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  length?: Prisma.SortOrderInput | Prisma.SortOrder
  continueAt?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.NoteOrderByRelationAggregateInput
  subject?: Prisma.SubjectOrderByWithRelationInput
}

export type LectureWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.LectureWhereInput | Prisma.LectureWhereInput[]
  OR?: Prisma.LectureWhereInput[]
  NOT?: Prisma.LectureWhereInput | Prisma.LectureWhereInput[]
  title?: Prisma.StringFilter<"Lecture"> | string
  videoUrl?: Prisma.StringNullableFilter<"Lecture"> | string | null
  subjectId?: Prisma.IntFilter<"Lecture"> | number
  length?: Prisma.IntNullableFilter<"Lecture"> | number | null
  continueAt?: Prisma.IntNullableFilter<"Lecture"> | number | null
  notes?: Prisma.NoteListRelationFilter
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
}, "id">

export type LectureOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  length?: Prisma.SortOrderInput | Prisma.SortOrder
  continueAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.LectureCountOrderByAggregateInput
  _avg?: Prisma.LectureAvgOrderByAggregateInput
  _max?: Prisma.LectureMaxOrderByAggregateInput
  _min?: Prisma.LectureMinOrderByAggregateInput
  _sum?: Prisma.LectureSumOrderByAggregateInput
}

export type LectureScalarWhereWithAggregatesInput = {
  AND?: Prisma.LectureScalarWhereWithAggregatesInput | Prisma.LectureScalarWhereWithAggregatesInput[]
  OR?: Prisma.LectureScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LectureScalarWhereWithAggregatesInput | Prisma.LectureScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Lecture"> | number
  title?: Prisma.StringWithAggregatesFilter<"Lecture"> | string
  videoUrl?: Prisma.StringNullableWithAggregatesFilter<"Lecture"> | string | null
  subjectId?: Prisma.IntWithAggregatesFilter<"Lecture"> | number
  length?: Prisma.IntNullableWithAggregatesFilter<"Lecture"> | number | null
  continueAt?: Prisma.IntNullableWithAggregatesFilter<"Lecture"> | number | null
}

export type LectureCreateInput = {
  title: string
  videoUrl?: string | null
  length?: number | null
  continueAt?: number | null
  notes?: Prisma.NoteCreateNestedManyWithoutLectureInput
  subject: Prisma.SubjectCreateNestedOneWithoutLecturesInput
}

export type LectureUncheckedCreateInput = {
  id?: number
  title: string
  videoUrl?: string | null
  subjectId: number
  length?: number | null
  continueAt?: number | null
  notes?: Prisma.NoteUncheckedCreateNestedManyWithoutLectureInput
}

export type LectureUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  notes?: Prisma.NoteUpdateManyWithoutLectureNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutLecturesNestedInput
}

export type LectureUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  notes?: Prisma.NoteUncheckedUpdateManyWithoutLectureNestedInput
}

export type LectureCreateManyInput = {
  id?: number
  title: string
  videoUrl?: string | null
  subjectId: number
  length?: number | null
  continueAt?: number | null
}

export type LectureUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type LectureUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type LectureListRelationFilter = {
  every?: Prisma.LectureWhereInput
  some?: Prisma.LectureWhereInput
  none?: Prisma.LectureWhereInput
}

export type LectureOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LectureCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  length?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
}

export type LectureAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  length?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
}

export type LectureMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  length?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
}

export type LectureMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  length?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
}

export type LectureSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  length?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
}

export type LectureScalarRelationFilter = {
  is?: Prisma.LectureWhereInput
  isNot?: Prisma.LectureWhereInput
}

export type LectureCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.LectureCreateWithoutSubjectInput, Prisma.LectureUncheckedCreateWithoutSubjectInput> | Prisma.LectureCreateWithoutSubjectInput[] | Prisma.LectureUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.LectureCreateOrConnectWithoutSubjectInput | Prisma.LectureCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.LectureCreateManySubjectInputEnvelope
  connect?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
}

export type LectureUncheckedCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.LectureCreateWithoutSubjectInput, Prisma.LectureUncheckedCreateWithoutSubjectInput> | Prisma.LectureCreateWithoutSubjectInput[] | Prisma.LectureUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.LectureCreateOrConnectWithoutSubjectInput | Prisma.LectureCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.LectureCreateManySubjectInputEnvelope
  connect?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
}

export type LectureUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.LectureCreateWithoutSubjectInput, Prisma.LectureUncheckedCreateWithoutSubjectInput> | Prisma.LectureCreateWithoutSubjectInput[] | Prisma.LectureUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.LectureCreateOrConnectWithoutSubjectInput | Prisma.LectureCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.LectureUpsertWithWhereUniqueWithoutSubjectInput | Prisma.LectureUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.LectureCreateManySubjectInputEnvelope
  set?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  disconnect?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  delete?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  connect?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  update?: Prisma.LectureUpdateWithWhereUniqueWithoutSubjectInput | Prisma.LectureUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.LectureUpdateManyWithWhereWithoutSubjectInput | Prisma.LectureUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.LectureScalarWhereInput | Prisma.LectureScalarWhereInput[]
}

export type LectureUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.LectureCreateWithoutSubjectInput, Prisma.LectureUncheckedCreateWithoutSubjectInput> | Prisma.LectureCreateWithoutSubjectInput[] | Prisma.LectureUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.LectureCreateOrConnectWithoutSubjectInput | Prisma.LectureCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.LectureUpsertWithWhereUniqueWithoutSubjectInput | Prisma.LectureUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.LectureCreateManySubjectInputEnvelope
  set?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  disconnect?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  delete?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  connect?: Prisma.LectureWhereUniqueInput | Prisma.LectureWhereUniqueInput[]
  update?: Prisma.LectureUpdateWithWhereUniqueWithoutSubjectInput | Prisma.LectureUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.LectureUpdateManyWithWhereWithoutSubjectInput | Prisma.LectureUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.LectureScalarWhereInput | Prisma.LectureScalarWhereInput[]
}

export type LectureCreateNestedOneWithoutNotesInput = {
  create?: Prisma.XOR<Prisma.LectureCreateWithoutNotesInput, Prisma.LectureUncheckedCreateWithoutNotesInput>
  connectOrCreate?: Prisma.LectureCreateOrConnectWithoutNotesInput
  connect?: Prisma.LectureWhereUniqueInput
}

export type LectureUpdateOneRequiredWithoutNotesNestedInput = {
  create?: Prisma.XOR<Prisma.LectureCreateWithoutNotesInput, Prisma.LectureUncheckedCreateWithoutNotesInput>
  connectOrCreate?: Prisma.LectureCreateOrConnectWithoutNotesInput
  upsert?: Prisma.LectureUpsertWithoutNotesInput
  connect?: Prisma.LectureWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LectureUpdateToOneWithWhereWithoutNotesInput, Prisma.LectureUpdateWithoutNotesInput>, Prisma.LectureUncheckedUpdateWithoutNotesInput>
}

export type LectureCreateWithoutSubjectInput = {
  title: string
  videoUrl?: string | null
  length?: number | null
  continueAt?: number | null
  notes?: Prisma.NoteCreateNestedManyWithoutLectureInput
}

export type LectureUncheckedCreateWithoutSubjectInput = {
  id?: number
  title: string
  videoUrl?: string | null
  length?: number | null
  continueAt?: number | null
  notes?: Prisma.NoteUncheckedCreateNestedManyWithoutLectureInput
}

export type LectureCreateOrConnectWithoutSubjectInput = {
  where: Prisma.LectureWhereUniqueInput
  create: Prisma.XOR<Prisma.LectureCreateWithoutSubjectInput, Prisma.LectureUncheckedCreateWithoutSubjectInput>
}

export type LectureCreateManySubjectInputEnvelope = {
  data: Prisma.LectureCreateManySubjectInput | Prisma.LectureCreateManySubjectInput[]
}

export type LectureUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.LectureWhereUniqueInput
  update: Prisma.XOR<Prisma.LectureUpdateWithoutSubjectInput, Prisma.LectureUncheckedUpdateWithoutSubjectInput>
  create: Prisma.XOR<Prisma.LectureCreateWithoutSubjectInput, Prisma.LectureUncheckedCreateWithoutSubjectInput>
}

export type LectureUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.LectureWhereUniqueInput
  data: Prisma.XOR<Prisma.LectureUpdateWithoutSubjectInput, Prisma.LectureUncheckedUpdateWithoutSubjectInput>
}

export type LectureUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.LectureScalarWhereInput
  data: Prisma.XOR<Prisma.LectureUpdateManyMutationInput, Prisma.LectureUncheckedUpdateManyWithoutSubjectInput>
}

export type LectureScalarWhereInput = {
  AND?: Prisma.LectureScalarWhereInput | Prisma.LectureScalarWhereInput[]
  OR?: Prisma.LectureScalarWhereInput[]
  NOT?: Prisma.LectureScalarWhereInput | Prisma.LectureScalarWhereInput[]
  id?: Prisma.IntFilter<"Lecture"> | number
  title?: Prisma.StringFilter<"Lecture"> | string
  videoUrl?: Prisma.StringNullableFilter<"Lecture"> | string | null
  subjectId?: Prisma.IntFilter<"Lecture"> | number
  length?: Prisma.IntNullableFilter<"Lecture"> | number | null
  continueAt?: Prisma.IntNullableFilter<"Lecture"> | number | null
}

export type LectureCreateWithoutNotesInput = {
  title: string
  videoUrl?: string | null
  length?: number | null
  continueAt?: number | null
  subject: Prisma.SubjectCreateNestedOneWithoutLecturesInput
}

export type LectureUncheckedCreateWithoutNotesInput = {
  id?: number
  title: string
  videoUrl?: string | null
  subjectId: number
  length?: number | null
  continueAt?: number | null
}

export type LectureCreateOrConnectWithoutNotesInput = {
  where: Prisma.LectureWhereUniqueInput
  create: Prisma.XOR<Prisma.LectureCreateWithoutNotesInput, Prisma.LectureUncheckedCreateWithoutNotesInput>
}

export type LectureUpsertWithoutNotesInput = {
  update: Prisma.XOR<Prisma.LectureUpdateWithoutNotesInput, Prisma.LectureUncheckedUpdateWithoutNotesInput>
  create: Prisma.XOR<Prisma.LectureCreateWithoutNotesInput, Prisma.LectureUncheckedCreateWithoutNotesInput>
  where?: Prisma.LectureWhereInput
}

export type LectureUpdateToOneWithWhereWithoutNotesInput = {
  where?: Prisma.LectureWhereInput
  data: Prisma.XOR<Prisma.LectureUpdateWithoutNotesInput, Prisma.LectureUncheckedUpdateWithoutNotesInput>
}

export type LectureUpdateWithoutNotesInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  subject?: Prisma.SubjectUpdateOneRequiredWithoutLecturesNestedInput
}

export type LectureUncheckedUpdateWithoutNotesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.IntFieldUpdateOperationsInput | number
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type LectureCreateManySubjectInput = {
  id?: number
  title: string
  videoUrl?: string | null
  length?: number | null
  continueAt?: number | null
}

export type LectureUpdateWithoutSubjectInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  notes?: Prisma.NoteUpdateManyWithoutLectureNestedInput
}

export type LectureUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  notes?: Prisma.NoteUncheckedUpdateManyWithoutLectureNestedInput
}

export type LectureUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}


/**
 * Count Type LectureCountOutputType
 */

export type LectureCountOutputType = {
  notes: number
}

export type LectureCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notes?: boolean | LectureCountOutputTypeCountNotesArgs
}

/**
 * LectureCountOutputType without action
 */
export type LectureCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LectureCountOutputType
   */
  select?: Prisma.LectureCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LectureCountOutputType without action
 */
export type LectureCountOutputTypeCountNotesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NoteWhereInput
}


export type LectureSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  videoUrl?: boolean
  subjectId?: boolean
  length?: boolean
  continueAt?: boolean
  notes?: boolean | Prisma.Lecture$notesArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.LectureCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lecture"]>

export type LectureSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  videoUrl?: boolean
  subjectId?: boolean
  length?: boolean
  continueAt?: boolean
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lecture"]>

export type LectureSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  videoUrl?: boolean
  subjectId?: boolean
  length?: boolean
  continueAt?: boolean
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lecture"]>

export type LectureSelectScalar = {
  id?: boolean
  title?: boolean
  videoUrl?: boolean
  subjectId?: boolean
  length?: boolean
  continueAt?: boolean
}

export type LectureOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "videoUrl" | "subjectId" | "length" | "continueAt", ExtArgs["result"]["lecture"]>
export type LectureInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notes?: boolean | Prisma.Lecture$notesArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.LectureCountOutputTypeDefaultArgs<ExtArgs>
}
export type LectureIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
}
export type LectureIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
}

export type $LecturePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Lecture"
  objects: {
    notes: Prisma.$NotePayload<ExtArgs>[]
    subject: Prisma.$SubjectPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    videoUrl: string | null
    subjectId: number
    length: number | null
    continueAt: number | null
  }, ExtArgs["result"]["lecture"]>
  composites: {}
}

export type LectureGetPayload<S extends boolean | null | undefined | LectureDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LecturePayload, S>

export type LectureCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LectureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LectureCountAggregateInputType | true
  }

export interface LectureDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lecture'], meta: { name: 'Lecture' } }
  /**
   * Find zero or one Lecture that matches the filter.
   * @param {LectureFindUniqueArgs} args - Arguments to find a Lecture
   * @example
   * // Get one Lecture
   * const lecture = await prisma.lecture.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LectureFindUniqueArgs>(args: Prisma.SelectSubset<T, LectureFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Lecture that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LectureFindUniqueOrThrowArgs} args - Arguments to find a Lecture
   * @example
   * // Get one Lecture
   * const lecture = await prisma.lecture.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LectureFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LectureFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lecture that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LectureFindFirstArgs} args - Arguments to find a Lecture
   * @example
   * // Get one Lecture
   * const lecture = await prisma.lecture.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LectureFindFirstArgs>(args?: Prisma.SelectSubset<T, LectureFindFirstArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lecture that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LectureFindFirstOrThrowArgs} args - Arguments to find a Lecture
   * @example
   * // Get one Lecture
   * const lecture = await prisma.lecture.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LectureFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LectureFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Lectures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LectureFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Lectures
   * const lectures = await prisma.lecture.findMany()
   * 
   * // Get first 10 Lectures
   * const lectures = await prisma.lecture.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const lectureWithIdOnly = await prisma.lecture.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LectureFindManyArgs>(args?: Prisma.SelectSubset<T, LectureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Lecture.
   * @param {LectureCreateArgs} args - Arguments to create a Lecture.
   * @example
   * // Create one Lecture
   * const Lecture = await prisma.lecture.create({
   *   data: {
   *     // ... data to create a Lecture
   *   }
   * })
   * 
   */
  create<T extends LectureCreateArgs>(args: Prisma.SelectSubset<T, LectureCreateArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Lectures.
   * @param {LectureCreateManyArgs} args - Arguments to create many Lectures.
   * @example
   * // Create many Lectures
   * const lecture = await prisma.lecture.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LectureCreateManyArgs>(args?: Prisma.SelectSubset<T, LectureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Lectures and returns the data saved in the database.
   * @param {LectureCreateManyAndReturnArgs} args - Arguments to create many Lectures.
   * @example
   * // Create many Lectures
   * const lecture = await prisma.lecture.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Lectures and only return the `id`
   * const lectureWithIdOnly = await prisma.lecture.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LectureCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LectureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Lecture.
   * @param {LectureDeleteArgs} args - Arguments to delete one Lecture.
   * @example
   * // Delete one Lecture
   * const Lecture = await prisma.lecture.delete({
   *   where: {
   *     // ... filter to delete one Lecture
   *   }
   * })
   * 
   */
  delete<T extends LectureDeleteArgs>(args: Prisma.SelectSubset<T, LectureDeleteArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Lecture.
   * @param {LectureUpdateArgs} args - Arguments to update one Lecture.
   * @example
   * // Update one Lecture
   * const lecture = await prisma.lecture.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LectureUpdateArgs>(args: Prisma.SelectSubset<T, LectureUpdateArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Lectures.
   * @param {LectureDeleteManyArgs} args - Arguments to filter Lectures to delete.
   * @example
   * // Delete a few Lectures
   * const { count } = await prisma.lecture.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LectureDeleteManyArgs>(args?: Prisma.SelectSubset<T, LectureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lectures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LectureUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Lectures
   * const lecture = await prisma.lecture.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LectureUpdateManyArgs>(args: Prisma.SelectSubset<T, LectureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lectures and returns the data updated in the database.
   * @param {LectureUpdateManyAndReturnArgs} args - Arguments to update many Lectures.
   * @example
   * // Update many Lectures
   * const lecture = await prisma.lecture.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Lectures and only return the `id`
   * const lectureWithIdOnly = await prisma.lecture.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LectureUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LectureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Lecture.
   * @param {LectureUpsertArgs} args - Arguments to update or create a Lecture.
   * @example
   * // Update or create a Lecture
   * const lecture = await prisma.lecture.upsert({
   *   create: {
   *     // ... data to create a Lecture
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Lecture we want to update
   *   }
   * })
   */
  upsert<T extends LectureUpsertArgs>(args: Prisma.SelectSubset<T, LectureUpsertArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Lectures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LectureCountArgs} args - Arguments to filter Lectures to count.
   * @example
   * // Count the number of Lectures
   * const count = await prisma.lecture.count({
   *   where: {
   *     // ... the filter for the Lectures we want to count
   *   }
   * })
  **/
  count<T extends LectureCountArgs>(
    args?: Prisma.Subset<T, LectureCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LectureCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Lecture.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LectureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LectureAggregateArgs>(args: Prisma.Subset<T, LectureAggregateArgs>): Prisma.PrismaPromise<GetLectureAggregateType<T>>

  /**
   * Group by Lecture.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LectureGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LectureGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LectureGroupByArgs['orderBy'] }
      : { orderBy?: LectureGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LectureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLectureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Lecture model
 */
readonly fields: LectureFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Lecture.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LectureClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  notes<T extends Prisma.Lecture$notesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Lecture$notesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>): Prisma.Prisma__SubjectClient<runtime.Types.Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Lecture model
 */
export interface LectureFieldRefs {
  readonly id: Prisma.FieldRef<"Lecture", 'Int'>
  readonly title: Prisma.FieldRef<"Lecture", 'String'>
  readonly videoUrl: Prisma.FieldRef<"Lecture", 'String'>
  readonly subjectId: Prisma.FieldRef<"Lecture", 'Int'>
  readonly length: Prisma.FieldRef<"Lecture", 'Int'>
  readonly continueAt: Prisma.FieldRef<"Lecture", 'Int'>
}
    

// Custom InputTypes
/**
 * Lecture findUnique
 */
export type LectureFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * Filter, which Lecture to fetch.
   */
  where: Prisma.LectureWhereUniqueInput
}

/**
 * Lecture findUniqueOrThrow
 */
export type LectureFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * Filter, which Lecture to fetch.
   */
  where: Prisma.LectureWhereUniqueInput
}

/**
 * Lecture findFirst
 */
export type LectureFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * Filter, which Lecture to fetch.
   */
  where?: Prisma.LectureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lectures to fetch.
   */
  orderBy?: Prisma.LectureOrderByWithRelationInput | Prisma.LectureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lectures.
   */
  cursor?: Prisma.LectureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lectures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lectures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lectures.
   */
  distinct?: Prisma.LectureScalarFieldEnum | Prisma.LectureScalarFieldEnum[]
}

/**
 * Lecture findFirstOrThrow
 */
export type LectureFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * Filter, which Lecture to fetch.
   */
  where?: Prisma.LectureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lectures to fetch.
   */
  orderBy?: Prisma.LectureOrderByWithRelationInput | Prisma.LectureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lectures.
   */
  cursor?: Prisma.LectureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lectures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lectures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lectures.
   */
  distinct?: Prisma.LectureScalarFieldEnum | Prisma.LectureScalarFieldEnum[]
}

/**
 * Lecture findMany
 */
export type LectureFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * Filter, which Lectures to fetch.
   */
  where?: Prisma.LectureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lectures to fetch.
   */
  orderBy?: Prisma.LectureOrderByWithRelationInput | Prisma.LectureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Lectures.
   */
  cursor?: Prisma.LectureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lectures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lectures.
   */
  skip?: number
  distinct?: Prisma.LectureScalarFieldEnum | Prisma.LectureScalarFieldEnum[]
}

/**
 * Lecture create
 */
export type LectureCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * The data needed to create a Lecture.
   */
  data: Prisma.XOR<Prisma.LectureCreateInput, Prisma.LectureUncheckedCreateInput>
}

/**
 * Lecture createMany
 */
export type LectureCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Lectures.
   */
  data: Prisma.LectureCreateManyInput | Prisma.LectureCreateManyInput[]
}

/**
 * Lecture createManyAndReturn
 */
export type LectureCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * The data used to create many Lectures.
   */
  data: Prisma.LectureCreateManyInput | Prisma.LectureCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Lecture update
 */
export type LectureUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * The data needed to update a Lecture.
   */
  data: Prisma.XOR<Prisma.LectureUpdateInput, Prisma.LectureUncheckedUpdateInput>
  /**
   * Choose, which Lecture to update.
   */
  where: Prisma.LectureWhereUniqueInput
}

/**
 * Lecture updateMany
 */
export type LectureUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Lectures.
   */
  data: Prisma.XOR<Prisma.LectureUpdateManyMutationInput, Prisma.LectureUncheckedUpdateManyInput>
  /**
   * Filter which Lectures to update
   */
  where?: Prisma.LectureWhereInput
  /**
   * Limit how many Lectures to update.
   */
  limit?: number
}

/**
 * Lecture updateManyAndReturn
 */
export type LectureUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * The data used to update Lectures.
   */
  data: Prisma.XOR<Prisma.LectureUpdateManyMutationInput, Prisma.LectureUncheckedUpdateManyInput>
  /**
   * Filter which Lectures to update
   */
  where?: Prisma.LectureWhereInput
  /**
   * Limit how many Lectures to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Lecture upsert
 */
export type LectureUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * The filter to search for the Lecture to update in case it exists.
   */
  where: Prisma.LectureWhereUniqueInput
  /**
   * In case the Lecture found by the `where` argument doesn't exist, create a new Lecture with this data.
   */
  create: Prisma.XOR<Prisma.LectureCreateInput, Prisma.LectureUncheckedCreateInput>
  /**
   * In case the Lecture was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LectureUpdateInput, Prisma.LectureUncheckedUpdateInput>
}

/**
 * Lecture delete
 */
export type LectureDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  /**
   * Filter which Lecture to delete.
   */
  where: Prisma.LectureWhereUniqueInput
}

/**
 * Lecture deleteMany
 */
export type LectureDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lectures to delete
   */
  where?: Prisma.LectureWhereInput
  /**
   * Limit how many Lectures to delete.
   */
  limit?: number
}

/**
 * Lecture.notes
 */
export type Lecture$notesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  where?: Prisma.NoteWhereInput
  orderBy?: Prisma.NoteOrderByWithRelationInput | Prisma.NoteOrderByWithRelationInput[]
  cursor?: Prisma.NoteWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Lecture without action
 */
export type LectureDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
}
