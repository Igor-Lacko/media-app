
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PlayableItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model PlayableItem
 * 
 */
export type PlayableItemModel = runtime.Types.Result.DefaultSelection<Prisma.$PlayableItemPayload>

export type AggregatePlayableItem = {
  _count: PlayableItemCountAggregateOutputType | null
  _avg: PlayableItemAvgAggregateOutputType | null
  _sum: PlayableItemSumAggregateOutputType | null
  _min: PlayableItemMinAggregateOutputType | null
  _max: PlayableItemMaxAggregateOutputType | null
}

export type PlayableItemAvgAggregateOutputType = {
  id: number | null
  length: number | null
  lastWatchedAt: number | null
  continueAt: number | null
  mediaId: number | null
}

export type PlayableItemSumAggregateOutputType = {
  id: number | null
  length: number | null
  lastWatchedAt: number | null
  continueAt: number | null
  mediaId: number | null
}

export type PlayableItemMinAggregateOutputType = {
  id: number | null
  videoUrl: string | null
  length: number | null
  lastWatchedAt: number | null
  continueAt: number | null
  watchStatus: $Enums.WatchStatus | null
  mediaId: number | null
}

export type PlayableItemMaxAggregateOutputType = {
  id: number | null
  videoUrl: string | null
  length: number | null
  lastWatchedAt: number | null
  continueAt: number | null
  watchStatus: $Enums.WatchStatus | null
  mediaId: number | null
}

export type PlayableItemCountAggregateOutputType = {
  id: number
  videoUrl: number
  length: number
  lastWatchedAt: number
  continueAt: number
  watchStatus: number
  mediaId: number
  _all: number
}


export type PlayableItemAvgAggregateInputType = {
  id?: true
  length?: true
  lastWatchedAt?: true
  continueAt?: true
  mediaId?: true
}

export type PlayableItemSumAggregateInputType = {
  id?: true
  length?: true
  lastWatchedAt?: true
  continueAt?: true
  mediaId?: true
}

export type PlayableItemMinAggregateInputType = {
  id?: true
  videoUrl?: true
  length?: true
  lastWatchedAt?: true
  continueAt?: true
  watchStatus?: true
  mediaId?: true
}

export type PlayableItemMaxAggregateInputType = {
  id?: true
  videoUrl?: true
  length?: true
  lastWatchedAt?: true
  continueAt?: true
  watchStatus?: true
  mediaId?: true
}

export type PlayableItemCountAggregateInputType = {
  id?: true
  videoUrl?: true
  length?: true
  lastWatchedAt?: true
  continueAt?: true
  watchStatus?: true
  mediaId?: true
  _all?: true
}

export type PlayableItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlayableItem to aggregate.
   */
  where?: Prisma.PlayableItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayableItems to fetch.
   */
  orderBy?: Prisma.PlayableItemOrderByWithRelationInput | Prisma.PlayableItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlayableItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayableItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayableItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlayableItems
  **/
  _count?: true | PlayableItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlayableItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlayableItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlayableItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlayableItemMaxAggregateInputType
}

export type GetPlayableItemAggregateType<T extends PlayableItemAggregateArgs> = {
      [P in keyof T & keyof AggregatePlayableItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlayableItem[P]>
    : Prisma.GetScalarType<T[P], AggregatePlayableItem[P]>
}




export type PlayableItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayableItemWhereInput
  orderBy?: Prisma.PlayableItemOrderByWithAggregationInput | Prisma.PlayableItemOrderByWithAggregationInput[]
  by: Prisma.PlayableItemScalarFieldEnum[] | Prisma.PlayableItemScalarFieldEnum
  having?: Prisma.PlayableItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlayableItemCountAggregateInputType | true
  _avg?: PlayableItemAvgAggregateInputType
  _sum?: PlayableItemSumAggregateInputType
  _min?: PlayableItemMinAggregateInputType
  _max?: PlayableItemMaxAggregateInputType
}

export type PlayableItemGroupByOutputType = {
  id: number
  videoUrl: string | null
  length: number | null
  lastWatchedAt: number | null
  continueAt: number
  watchStatus: $Enums.WatchStatus
  mediaId: number
  _count: PlayableItemCountAggregateOutputType | null
  _avg: PlayableItemAvgAggregateOutputType | null
  _sum: PlayableItemSumAggregateOutputType | null
  _min: PlayableItemMinAggregateOutputType | null
  _max: PlayableItemMaxAggregateOutputType | null
}

type GetPlayableItemGroupByPayload<T extends PlayableItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlayableItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlayableItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlayableItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlayableItemGroupByOutputType[P]>
      }
    >
  > 



export type PlayableItemWhereInput = {
  AND?: Prisma.PlayableItemWhereInput | Prisma.PlayableItemWhereInput[]
  OR?: Prisma.PlayableItemWhereInput[]
  NOT?: Prisma.PlayableItemWhereInput | Prisma.PlayableItemWhereInput[]
  id?: Prisma.IntFilter<"PlayableItem"> | number
  videoUrl?: Prisma.StringNullableFilter<"PlayableItem"> | string | null
  length?: Prisma.IntNullableFilter<"PlayableItem"> | number | null
  lastWatchedAt?: Prisma.IntNullableFilter<"PlayableItem"> | number | null
  continueAt?: Prisma.IntFilter<"PlayableItem"> | number
  watchStatus?: Prisma.EnumWatchStatusFilter<"PlayableItem"> | $Enums.WatchStatus
  mediaId?: Prisma.IntFilter<"PlayableItem"> | number
  media?: Prisma.XOR<Prisma.MediaScalarRelationFilter, Prisma.MediaWhereInput>
  movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
  episode?: Prisma.XOR<Prisma.EpisodeNullableScalarRelationFilter, Prisma.EpisodeWhereInput> | null
  lecture?: Prisma.XOR<Prisma.LectureNullableScalarRelationFilter, Prisma.LectureWhereInput> | null
}

export type PlayableItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  length?: Prisma.SortOrderInput | Prisma.SortOrder
  lastWatchedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  continueAt?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
  media?: Prisma.MediaOrderByWithRelationInput
  movie?: Prisma.MovieOrderByWithRelationInput
  episode?: Prisma.EpisodeOrderByWithRelationInput
  lecture?: Prisma.LectureOrderByWithRelationInput
}

export type PlayableItemWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  mediaId?: number
  AND?: Prisma.PlayableItemWhereInput | Prisma.PlayableItemWhereInput[]
  OR?: Prisma.PlayableItemWhereInput[]
  NOT?: Prisma.PlayableItemWhereInput | Prisma.PlayableItemWhereInput[]
  videoUrl?: Prisma.StringNullableFilter<"PlayableItem"> | string | null
  length?: Prisma.IntNullableFilter<"PlayableItem"> | number | null
  lastWatchedAt?: Prisma.IntNullableFilter<"PlayableItem"> | number | null
  continueAt?: Prisma.IntFilter<"PlayableItem"> | number
  watchStatus?: Prisma.EnumWatchStatusFilter<"PlayableItem"> | $Enums.WatchStatus
  media?: Prisma.XOR<Prisma.MediaScalarRelationFilter, Prisma.MediaWhereInput>
  movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
  episode?: Prisma.XOR<Prisma.EpisodeNullableScalarRelationFilter, Prisma.EpisodeWhereInput> | null
  lecture?: Prisma.XOR<Prisma.LectureNullableScalarRelationFilter, Prisma.LectureWhereInput> | null
}, "id" | "mediaId">

export type PlayableItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  length?: Prisma.SortOrderInput | Prisma.SortOrder
  lastWatchedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  continueAt?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
  _count?: Prisma.PlayableItemCountOrderByAggregateInput
  _avg?: Prisma.PlayableItemAvgOrderByAggregateInput
  _max?: Prisma.PlayableItemMaxOrderByAggregateInput
  _min?: Prisma.PlayableItemMinOrderByAggregateInput
  _sum?: Prisma.PlayableItemSumOrderByAggregateInput
}

export type PlayableItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlayableItemScalarWhereWithAggregatesInput | Prisma.PlayableItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlayableItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlayableItemScalarWhereWithAggregatesInput | Prisma.PlayableItemScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PlayableItem"> | number
  videoUrl?: Prisma.StringNullableWithAggregatesFilter<"PlayableItem"> | string | null
  length?: Prisma.IntNullableWithAggregatesFilter<"PlayableItem"> | number | null
  lastWatchedAt?: Prisma.IntNullableWithAggregatesFilter<"PlayableItem"> | number | null
  continueAt?: Prisma.IntWithAggregatesFilter<"PlayableItem"> | number
  watchStatus?: Prisma.EnumWatchStatusWithAggregatesFilter<"PlayableItem"> | $Enums.WatchStatus
  mediaId?: Prisma.IntWithAggregatesFilter<"PlayableItem"> | number
}

export type PlayableItemCreateInput = {
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  media: Prisma.MediaCreateNestedOneWithoutPlayableItemInput
  movie?: Prisma.MovieCreateNestedOneWithoutPlayableItemInput
  episode?: Prisma.EpisodeCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemUncheckedCreateInput = {
  id?: number
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  mediaId: number
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutPlayableItemInput
  episode?: Prisma.EpisodeUncheckedCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureUncheckedCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemUpdateInput = {
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  media?: Prisma.MediaUpdateOneRequiredWithoutPlayableItemNestedInput
  movie?: Prisma.MovieUpdateOneWithoutPlayableItemNestedInput
  episode?: Prisma.EpisodeUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  movie?: Prisma.MovieUncheckedUpdateOneWithoutPlayableItemNestedInput
  episode?: Prisma.EpisodeUncheckedUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUncheckedUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemCreateManyInput = {
  id?: number
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  mediaId: number
}

export type PlayableItemUpdateManyMutationInput = {
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
}

export type PlayableItemUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PlayableItemNullableScalarRelationFilter = {
  is?: Prisma.PlayableItemWhereInput | null
  isNot?: Prisma.PlayableItemWhereInput | null
}

export type PlayableItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  length?: Prisma.SortOrder
  lastWatchedAt?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type PlayableItemAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  length?: Prisma.SortOrder
  lastWatchedAt?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type PlayableItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  length?: Prisma.SortOrder
  lastWatchedAt?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type PlayableItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  length?: Prisma.SortOrder
  lastWatchedAt?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
  watchStatus?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type PlayableItemSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  length?: Prisma.SortOrder
  lastWatchedAt?: Prisma.SortOrder
  continueAt?: Prisma.SortOrder
  mediaId?: Prisma.SortOrder
}

export type PlayableItemScalarRelationFilter = {
  is?: Prisma.PlayableItemWhereInput
  isNot?: Prisma.PlayableItemWhereInput
}

export type PlayableItemCreateNestedOneWithoutMediaInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutMediaInput, Prisma.PlayableItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutMediaInput
  connect?: Prisma.PlayableItemWhereUniqueInput
}

export type PlayableItemUncheckedCreateNestedOneWithoutMediaInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutMediaInput, Prisma.PlayableItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutMediaInput
  connect?: Prisma.PlayableItemWhereUniqueInput
}

export type PlayableItemUpdateOneWithoutMediaNestedInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutMediaInput, Prisma.PlayableItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutMediaInput
  upsert?: Prisma.PlayableItemUpsertWithoutMediaInput
  disconnect?: Prisma.PlayableItemWhereInput | boolean
  delete?: Prisma.PlayableItemWhereInput | boolean
  connect?: Prisma.PlayableItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayableItemUpdateToOneWithWhereWithoutMediaInput, Prisma.PlayableItemUpdateWithoutMediaInput>, Prisma.PlayableItemUncheckedUpdateWithoutMediaInput>
}

export type PlayableItemUncheckedUpdateOneWithoutMediaNestedInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutMediaInput, Prisma.PlayableItemUncheckedCreateWithoutMediaInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutMediaInput
  upsert?: Prisma.PlayableItemUpsertWithoutMediaInput
  disconnect?: Prisma.PlayableItemWhereInput | boolean
  delete?: Prisma.PlayableItemWhereInput | boolean
  connect?: Prisma.PlayableItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayableItemUpdateToOneWithWhereWithoutMediaInput, Prisma.PlayableItemUpdateWithoutMediaInput>, Prisma.PlayableItemUncheckedUpdateWithoutMediaInput>
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type PlayableItemCreateNestedOneWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutMovieInput, Prisma.PlayableItemUncheckedCreateWithoutMovieInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutMovieInput
  connect?: Prisma.PlayableItemWhereUniqueInput
}

export type PlayableItemUpdateOneRequiredWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutMovieInput, Prisma.PlayableItemUncheckedCreateWithoutMovieInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutMovieInput
  upsert?: Prisma.PlayableItemUpsertWithoutMovieInput
  connect?: Prisma.PlayableItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayableItemUpdateToOneWithWhereWithoutMovieInput, Prisma.PlayableItemUpdateWithoutMovieInput>, Prisma.PlayableItemUncheckedUpdateWithoutMovieInput>
}

export type PlayableItemCreateNestedOneWithoutEpisodeInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutEpisodeInput, Prisma.PlayableItemUncheckedCreateWithoutEpisodeInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutEpisodeInput
  connect?: Prisma.PlayableItemWhereUniqueInput
}

export type PlayableItemUpdateOneRequiredWithoutEpisodeNestedInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutEpisodeInput, Prisma.PlayableItemUncheckedCreateWithoutEpisodeInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutEpisodeInput
  upsert?: Prisma.PlayableItemUpsertWithoutEpisodeInput
  connect?: Prisma.PlayableItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayableItemUpdateToOneWithWhereWithoutEpisodeInput, Prisma.PlayableItemUpdateWithoutEpisodeInput>, Prisma.PlayableItemUncheckedUpdateWithoutEpisodeInput>
}

export type PlayableItemCreateNestedOneWithoutLectureInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutLectureInput, Prisma.PlayableItemUncheckedCreateWithoutLectureInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutLectureInput
  connect?: Prisma.PlayableItemWhereUniqueInput
}

export type PlayableItemUpdateOneRequiredWithoutLectureNestedInput = {
  create?: Prisma.XOR<Prisma.PlayableItemCreateWithoutLectureInput, Prisma.PlayableItemUncheckedCreateWithoutLectureInput>
  connectOrCreate?: Prisma.PlayableItemCreateOrConnectWithoutLectureInput
  upsert?: Prisma.PlayableItemUpsertWithoutLectureInput
  connect?: Prisma.PlayableItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayableItemUpdateToOneWithWhereWithoutLectureInput, Prisma.PlayableItemUpdateWithoutLectureInput>, Prisma.PlayableItemUncheckedUpdateWithoutLectureInput>
}

export type PlayableItemCreateWithoutMediaInput = {
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  movie?: Prisma.MovieCreateNestedOneWithoutPlayableItemInput
  episode?: Prisma.EpisodeCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemUncheckedCreateWithoutMediaInput = {
  id?: number
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutPlayableItemInput
  episode?: Prisma.EpisodeUncheckedCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureUncheckedCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemCreateOrConnectWithoutMediaInput = {
  where: Prisma.PlayableItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutMediaInput, Prisma.PlayableItemUncheckedCreateWithoutMediaInput>
}

export type PlayableItemUpsertWithoutMediaInput = {
  update: Prisma.XOR<Prisma.PlayableItemUpdateWithoutMediaInput, Prisma.PlayableItemUncheckedUpdateWithoutMediaInput>
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutMediaInput, Prisma.PlayableItemUncheckedCreateWithoutMediaInput>
  where?: Prisma.PlayableItemWhereInput
}

export type PlayableItemUpdateToOneWithWhereWithoutMediaInput = {
  where?: Prisma.PlayableItemWhereInput
  data: Prisma.XOR<Prisma.PlayableItemUpdateWithoutMediaInput, Prisma.PlayableItemUncheckedUpdateWithoutMediaInput>
}

export type PlayableItemUpdateWithoutMediaInput = {
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  movie?: Prisma.MovieUpdateOneWithoutPlayableItemNestedInput
  episode?: Prisma.EpisodeUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemUncheckedUpdateWithoutMediaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  movie?: Prisma.MovieUncheckedUpdateOneWithoutPlayableItemNestedInput
  episode?: Prisma.EpisodeUncheckedUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUncheckedUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemCreateWithoutMovieInput = {
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  media: Prisma.MediaCreateNestedOneWithoutPlayableItemInput
  episode?: Prisma.EpisodeCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemUncheckedCreateWithoutMovieInput = {
  id?: number
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  mediaId: number
  episode?: Prisma.EpisodeUncheckedCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureUncheckedCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemCreateOrConnectWithoutMovieInput = {
  where: Prisma.PlayableItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutMovieInput, Prisma.PlayableItemUncheckedCreateWithoutMovieInput>
}

export type PlayableItemUpsertWithoutMovieInput = {
  update: Prisma.XOR<Prisma.PlayableItemUpdateWithoutMovieInput, Prisma.PlayableItemUncheckedUpdateWithoutMovieInput>
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutMovieInput, Prisma.PlayableItemUncheckedCreateWithoutMovieInput>
  where?: Prisma.PlayableItemWhereInput
}

export type PlayableItemUpdateToOneWithWhereWithoutMovieInput = {
  where?: Prisma.PlayableItemWhereInput
  data: Prisma.XOR<Prisma.PlayableItemUpdateWithoutMovieInput, Prisma.PlayableItemUncheckedUpdateWithoutMovieInput>
}

export type PlayableItemUpdateWithoutMovieInput = {
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  media?: Prisma.MediaUpdateOneRequiredWithoutPlayableItemNestedInput
  episode?: Prisma.EpisodeUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemUncheckedUpdateWithoutMovieInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  episode?: Prisma.EpisodeUncheckedUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUncheckedUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemCreateWithoutEpisodeInput = {
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  media: Prisma.MediaCreateNestedOneWithoutPlayableItemInput
  movie?: Prisma.MovieCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemUncheckedCreateWithoutEpisodeInput = {
  id?: number
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  mediaId: number
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutPlayableItemInput
  lecture?: Prisma.LectureUncheckedCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemCreateOrConnectWithoutEpisodeInput = {
  where: Prisma.PlayableItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutEpisodeInput, Prisma.PlayableItemUncheckedCreateWithoutEpisodeInput>
}

export type PlayableItemUpsertWithoutEpisodeInput = {
  update: Prisma.XOR<Prisma.PlayableItemUpdateWithoutEpisodeInput, Prisma.PlayableItemUncheckedUpdateWithoutEpisodeInput>
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutEpisodeInput, Prisma.PlayableItemUncheckedCreateWithoutEpisodeInput>
  where?: Prisma.PlayableItemWhereInput
}

export type PlayableItemUpdateToOneWithWhereWithoutEpisodeInput = {
  where?: Prisma.PlayableItemWhereInput
  data: Prisma.XOR<Prisma.PlayableItemUpdateWithoutEpisodeInput, Prisma.PlayableItemUncheckedUpdateWithoutEpisodeInput>
}

export type PlayableItemUpdateWithoutEpisodeInput = {
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  media?: Prisma.MediaUpdateOneRequiredWithoutPlayableItemNestedInput
  movie?: Prisma.MovieUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemUncheckedUpdateWithoutEpisodeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  movie?: Prisma.MovieUncheckedUpdateOneWithoutPlayableItemNestedInput
  lecture?: Prisma.LectureUncheckedUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemCreateWithoutLectureInput = {
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  media: Prisma.MediaCreateNestedOneWithoutPlayableItemInput
  movie?: Prisma.MovieCreateNestedOneWithoutPlayableItemInput
  episode?: Prisma.EpisodeCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemUncheckedCreateWithoutLectureInput = {
  id?: number
  videoUrl?: string | null
  length?: number | null
  lastWatchedAt?: number | null
  continueAt?: number
  watchStatus?: $Enums.WatchStatus
  mediaId: number
  movie?: Prisma.MovieUncheckedCreateNestedOneWithoutPlayableItemInput
  episode?: Prisma.EpisodeUncheckedCreateNestedOneWithoutPlayableItemInput
}

export type PlayableItemCreateOrConnectWithoutLectureInput = {
  where: Prisma.PlayableItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutLectureInput, Prisma.PlayableItemUncheckedCreateWithoutLectureInput>
}

export type PlayableItemUpsertWithoutLectureInput = {
  update: Prisma.XOR<Prisma.PlayableItemUpdateWithoutLectureInput, Prisma.PlayableItemUncheckedUpdateWithoutLectureInput>
  create: Prisma.XOR<Prisma.PlayableItemCreateWithoutLectureInput, Prisma.PlayableItemUncheckedCreateWithoutLectureInput>
  where?: Prisma.PlayableItemWhereInput
}

export type PlayableItemUpdateToOneWithWhereWithoutLectureInput = {
  where?: Prisma.PlayableItemWhereInput
  data: Prisma.XOR<Prisma.PlayableItemUpdateWithoutLectureInput, Prisma.PlayableItemUncheckedUpdateWithoutLectureInput>
}

export type PlayableItemUpdateWithoutLectureInput = {
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  media?: Prisma.MediaUpdateOneRequiredWithoutPlayableItemNestedInput
  movie?: Prisma.MovieUpdateOneWithoutPlayableItemNestedInput
  episode?: Prisma.EpisodeUpdateOneWithoutPlayableItemNestedInput
}

export type PlayableItemUncheckedUpdateWithoutLectureInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  videoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  length?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastWatchedAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  continueAt?: Prisma.IntFieldUpdateOperationsInput | number
  watchStatus?: Prisma.EnumWatchStatusFieldUpdateOperationsInput | $Enums.WatchStatus
  mediaId?: Prisma.IntFieldUpdateOperationsInput | number
  movie?: Prisma.MovieUncheckedUpdateOneWithoutPlayableItemNestedInput
  episode?: Prisma.EpisodeUncheckedUpdateOneWithoutPlayableItemNestedInput
}



export type PlayableItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  videoUrl?: boolean
  length?: boolean
  lastWatchedAt?: boolean
  continueAt?: boolean
  watchStatus?: boolean
  mediaId?: boolean
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.PlayableItem$movieArgs<ExtArgs>
  episode?: boolean | Prisma.PlayableItem$episodeArgs<ExtArgs>
  lecture?: boolean | Prisma.PlayableItem$lectureArgs<ExtArgs>
}, ExtArgs["result"]["playableItem"]>

export type PlayableItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  videoUrl?: boolean
  length?: boolean
  lastWatchedAt?: boolean
  continueAt?: boolean
  watchStatus?: boolean
  mediaId?: boolean
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playableItem"]>

export type PlayableItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  videoUrl?: boolean
  length?: boolean
  lastWatchedAt?: boolean
  continueAt?: boolean
  watchStatus?: boolean
  mediaId?: boolean
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playableItem"]>

export type PlayableItemSelectScalar = {
  id?: boolean
  videoUrl?: boolean
  length?: boolean
  lastWatchedAt?: boolean
  continueAt?: boolean
  watchStatus?: boolean
  mediaId?: boolean
}

export type PlayableItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "videoUrl" | "length" | "lastWatchedAt" | "continueAt" | "watchStatus" | "mediaId", ExtArgs["result"]["playableItem"]>
export type PlayableItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.PlayableItem$movieArgs<ExtArgs>
  episode?: boolean | Prisma.PlayableItem$episodeArgs<ExtArgs>
  lecture?: boolean | Prisma.PlayableItem$lectureArgs<ExtArgs>
}
export type PlayableItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}
export type PlayableItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  media?: boolean | Prisma.MediaDefaultArgs<ExtArgs>
}

export type $PlayableItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlayableItem"
  objects: {
    media: Prisma.$MediaPayload<ExtArgs>
    movie: Prisma.$MoviePayload<ExtArgs> | null
    episode: Prisma.$EpisodePayload<ExtArgs> | null
    lecture: Prisma.$LecturePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    videoUrl: string | null
    length: number | null
    lastWatchedAt: number | null
    continueAt: number
    watchStatus: $Enums.WatchStatus
    mediaId: number
  }, ExtArgs["result"]["playableItem"]>
  composites: {}
}

export type PlayableItemGetPayload<S extends boolean | null | undefined | PlayableItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload, S>

export type PlayableItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlayableItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlayableItemCountAggregateInputType | true
  }

export interface PlayableItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayableItem'], meta: { name: 'PlayableItem' } }
  /**
   * Find zero or one PlayableItem that matches the filter.
   * @param {PlayableItemFindUniqueArgs} args - Arguments to find a PlayableItem
   * @example
   * // Get one PlayableItem
   * const playableItem = await prisma.playableItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlayableItemFindUniqueArgs>(args: Prisma.SelectSubset<T, PlayableItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlayableItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlayableItemFindUniqueOrThrowArgs} args - Arguments to find a PlayableItem
   * @example
   * // Get one PlayableItem
   * const playableItem = await prisma.playableItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlayableItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlayableItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlayableItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayableItemFindFirstArgs} args - Arguments to find a PlayableItem
   * @example
   * // Get one PlayableItem
   * const playableItem = await prisma.playableItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlayableItemFindFirstArgs>(args?: Prisma.SelectSubset<T, PlayableItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlayableItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayableItemFindFirstOrThrowArgs} args - Arguments to find a PlayableItem
   * @example
   * // Get one PlayableItem
   * const playableItem = await prisma.playableItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlayableItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlayableItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlayableItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayableItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlayableItems
   * const playableItems = await prisma.playableItem.findMany()
   * 
   * // Get first 10 PlayableItems
   * const playableItems = await prisma.playableItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const playableItemWithIdOnly = await prisma.playableItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlayableItemFindManyArgs>(args?: Prisma.SelectSubset<T, PlayableItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlayableItem.
   * @param {PlayableItemCreateArgs} args - Arguments to create a PlayableItem.
   * @example
   * // Create one PlayableItem
   * const PlayableItem = await prisma.playableItem.create({
   *   data: {
   *     // ... data to create a PlayableItem
   *   }
   * })
   * 
   */
  create<T extends PlayableItemCreateArgs>(args: Prisma.SelectSubset<T, PlayableItemCreateArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlayableItems.
   * @param {PlayableItemCreateManyArgs} args - Arguments to create many PlayableItems.
   * @example
   * // Create many PlayableItems
   * const playableItem = await prisma.playableItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlayableItemCreateManyArgs>(args?: Prisma.SelectSubset<T, PlayableItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlayableItems and returns the data saved in the database.
   * @param {PlayableItemCreateManyAndReturnArgs} args - Arguments to create many PlayableItems.
   * @example
   * // Create many PlayableItems
   * const playableItem = await prisma.playableItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlayableItems and only return the `id`
   * const playableItemWithIdOnly = await prisma.playableItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlayableItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlayableItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlayableItem.
   * @param {PlayableItemDeleteArgs} args - Arguments to delete one PlayableItem.
   * @example
   * // Delete one PlayableItem
   * const PlayableItem = await prisma.playableItem.delete({
   *   where: {
   *     // ... filter to delete one PlayableItem
   *   }
   * })
   * 
   */
  delete<T extends PlayableItemDeleteArgs>(args: Prisma.SelectSubset<T, PlayableItemDeleteArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlayableItem.
   * @param {PlayableItemUpdateArgs} args - Arguments to update one PlayableItem.
   * @example
   * // Update one PlayableItem
   * const playableItem = await prisma.playableItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlayableItemUpdateArgs>(args: Prisma.SelectSubset<T, PlayableItemUpdateArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlayableItems.
   * @param {PlayableItemDeleteManyArgs} args - Arguments to filter PlayableItems to delete.
   * @example
   * // Delete a few PlayableItems
   * const { count } = await prisma.playableItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlayableItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlayableItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlayableItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayableItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlayableItems
   * const playableItem = await prisma.playableItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlayableItemUpdateManyArgs>(args: Prisma.SelectSubset<T, PlayableItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlayableItems and returns the data updated in the database.
   * @param {PlayableItemUpdateManyAndReturnArgs} args - Arguments to update many PlayableItems.
   * @example
   * // Update many PlayableItems
   * const playableItem = await prisma.playableItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlayableItems and only return the `id`
   * const playableItemWithIdOnly = await prisma.playableItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlayableItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlayableItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlayableItem.
   * @param {PlayableItemUpsertArgs} args - Arguments to update or create a PlayableItem.
   * @example
   * // Update or create a PlayableItem
   * const playableItem = await prisma.playableItem.upsert({
   *   create: {
   *     // ... data to create a PlayableItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlayableItem we want to update
   *   }
   * })
   */
  upsert<T extends PlayableItemUpsertArgs>(args: Prisma.SelectSubset<T, PlayableItemUpsertArgs<ExtArgs>>): Prisma.Prisma__PlayableItemClient<runtime.Types.Result.GetResult<Prisma.$PlayableItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlayableItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayableItemCountArgs} args - Arguments to filter PlayableItems to count.
   * @example
   * // Count the number of PlayableItems
   * const count = await prisma.playableItem.count({
   *   where: {
   *     // ... the filter for the PlayableItems we want to count
   *   }
   * })
  **/
  count<T extends PlayableItemCountArgs>(
    args?: Prisma.Subset<T, PlayableItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlayableItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlayableItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayableItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlayableItemAggregateArgs>(args: Prisma.Subset<T, PlayableItemAggregateArgs>): Prisma.PrismaPromise<GetPlayableItemAggregateType<T>>

  /**
   * Group by PlayableItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayableItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlayableItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlayableItemGroupByArgs['orderBy'] }
      : { orderBy?: PlayableItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlayableItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayableItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlayableItem model
 */
readonly fields: PlayableItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlayableItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlayableItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  media<T extends Prisma.MediaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  movie<T extends Prisma.PlayableItem$movieArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayableItem$movieArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  episode<T extends Prisma.PlayableItem$episodeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayableItem$episodeArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  lecture<T extends Prisma.PlayableItem$lectureArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayableItem$lectureArgs<ExtArgs>>): Prisma.Prisma__LectureClient<runtime.Types.Result.GetResult<Prisma.$LecturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlayableItem model
 */
export interface PlayableItemFieldRefs {
  readonly id: Prisma.FieldRef<"PlayableItem", 'Int'>
  readonly videoUrl: Prisma.FieldRef<"PlayableItem", 'String'>
  readonly length: Prisma.FieldRef<"PlayableItem", 'Int'>
  readonly lastWatchedAt: Prisma.FieldRef<"PlayableItem", 'Int'>
  readonly continueAt: Prisma.FieldRef<"PlayableItem", 'Int'>
  readonly watchStatus: Prisma.FieldRef<"PlayableItem", 'WatchStatus'>
  readonly mediaId: Prisma.FieldRef<"PlayableItem", 'Int'>
}
    

// Custom InputTypes
/**
 * PlayableItem findUnique
 */
export type PlayableItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * Filter, which PlayableItem to fetch.
   */
  where: Prisma.PlayableItemWhereUniqueInput
}

/**
 * PlayableItem findUniqueOrThrow
 */
export type PlayableItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * Filter, which PlayableItem to fetch.
   */
  where: Prisma.PlayableItemWhereUniqueInput
}

/**
 * PlayableItem findFirst
 */
export type PlayableItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * Filter, which PlayableItem to fetch.
   */
  where?: Prisma.PlayableItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayableItems to fetch.
   */
  orderBy?: Prisma.PlayableItemOrderByWithRelationInput | Prisma.PlayableItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlayableItems.
   */
  cursor?: Prisma.PlayableItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayableItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayableItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlayableItems.
   */
  distinct?: Prisma.PlayableItemScalarFieldEnum | Prisma.PlayableItemScalarFieldEnum[]
}

/**
 * PlayableItem findFirstOrThrow
 */
export type PlayableItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * Filter, which PlayableItem to fetch.
   */
  where?: Prisma.PlayableItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayableItems to fetch.
   */
  orderBy?: Prisma.PlayableItemOrderByWithRelationInput | Prisma.PlayableItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlayableItems.
   */
  cursor?: Prisma.PlayableItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayableItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayableItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlayableItems.
   */
  distinct?: Prisma.PlayableItemScalarFieldEnum | Prisma.PlayableItemScalarFieldEnum[]
}

/**
 * PlayableItem findMany
 */
export type PlayableItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * Filter, which PlayableItems to fetch.
   */
  where?: Prisma.PlayableItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayableItems to fetch.
   */
  orderBy?: Prisma.PlayableItemOrderByWithRelationInput | Prisma.PlayableItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlayableItems.
   */
  cursor?: Prisma.PlayableItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayableItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayableItems.
   */
  skip?: number
  distinct?: Prisma.PlayableItemScalarFieldEnum | Prisma.PlayableItemScalarFieldEnum[]
}

/**
 * PlayableItem create
 */
export type PlayableItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * The data needed to create a PlayableItem.
   */
  data: Prisma.XOR<Prisma.PlayableItemCreateInput, Prisma.PlayableItemUncheckedCreateInput>
}

/**
 * PlayableItem createMany
 */
export type PlayableItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlayableItems.
   */
  data: Prisma.PlayableItemCreateManyInput | Prisma.PlayableItemCreateManyInput[]
}

/**
 * PlayableItem createManyAndReturn
 */
export type PlayableItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * The data used to create many PlayableItems.
   */
  data: Prisma.PlayableItemCreateManyInput | Prisma.PlayableItemCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlayableItem update
 */
export type PlayableItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * The data needed to update a PlayableItem.
   */
  data: Prisma.XOR<Prisma.PlayableItemUpdateInput, Prisma.PlayableItemUncheckedUpdateInput>
  /**
   * Choose, which PlayableItem to update.
   */
  where: Prisma.PlayableItemWhereUniqueInput
}

/**
 * PlayableItem updateMany
 */
export type PlayableItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlayableItems.
   */
  data: Prisma.XOR<Prisma.PlayableItemUpdateManyMutationInput, Prisma.PlayableItemUncheckedUpdateManyInput>
  /**
   * Filter which PlayableItems to update
   */
  where?: Prisma.PlayableItemWhereInput
  /**
   * Limit how many PlayableItems to update.
   */
  limit?: number
}

/**
 * PlayableItem updateManyAndReturn
 */
export type PlayableItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * The data used to update PlayableItems.
   */
  data: Prisma.XOR<Prisma.PlayableItemUpdateManyMutationInput, Prisma.PlayableItemUncheckedUpdateManyInput>
  /**
   * Filter which PlayableItems to update
   */
  where?: Prisma.PlayableItemWhereInput
  /**
   * Limit how many PlayableItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlayableItem upsert
 */
export type PlayableItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * The filter to search for the PlayableItem to update in case it exists.
   */
  where: Prisma.PlayableItemWhereUniqueInput
  /**
   * In case the PlayableItem found by the `where` argument doesn't exist, create a new PlayableItem with this data.
   */
  create: Prisma.XOR<Prisma.PlayableItemCreateInput, Prisma.PlayableItemUncheckedCreateInput>
  /**
   * In case the PlayableItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlayableItemUpdateInput, Prisma.PlayableItemUncheckedUpdateInput>
}

/**
 * PlayableItem delete
 */
export type PlayableItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
  /**
   * Filter which PlayableItem to delete.
   */
  where: Prisma.PlayableItemWhereUniqueInput
}

/**
 * PlayableItem deleteMany
 */
export type PlayableItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlayableItems to delete
   */
  where?: Prisma.PlayableItemWhereInput
  /**
   * Limit how many PlayableItems to delete.
   */
  limit?: number
}

/**
 * PlayableItem.movie
 */
export type PlayableItem$movieArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  where?: Prisma.MovieWhereInput
}

/**
 * PlayableItem.episode
 */
export type PlayableItem$episodeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  where?: Prisma.EpisodeWhereInput
}

/**
 * PlayableItem.lecture
 */
export type PlayableItem$lectureArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lecture
   */
  select?: Prisma.LectureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lecture
   */
  omit?: Prisma.LectureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LectureInclude<ExtArgs> | null
  where?: Prisma.LectureWhereInput
}

/**
 * PlayableItem without action
 */
export type PlayableItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayableItem
   */
  select?: Prisma.PlayableItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayableItem
   */
  omit?: Prisma.PlayableItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayableItemInclude<ExtArgs> | null
}
