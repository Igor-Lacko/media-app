
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EntertainmentGenre` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model EntertainmentGenre
 * 
 */
export type EntertainmentGenreModel = runtime.Types.Result.DefaultSelection<Prisma.$EntertainmentGenrePayload>

export type AggregateEntertainmentGenre = {
  _count: EntertainmentGenreCountAggregateOutputType | null
  _avg: EntertainmentGenreAvgAggregateOutputType | null
  _sum: EntertainmentGenreSumAggregateOutputType | null
  _min: EntertainmentGenreMinAggregateOutputType | null
  _max: EntertainmentGenreMaxAggregateOutputType | null
}

export type EntertainmentGenreAvgAggregateOutputType = {
  id: number | null
  movieId: number | null
  showId: number | null
}

export type EntertainmentGenreSumAggregateOutputType = {
  id: number | null
  movieId: number | null
  showId: number | null
}

export type EntertainmentGenreMinAggregateOutputType = {
  id: number | null
  genre: $Enums.Genre | null
  movieId: number | null
  showId: number | null
}

export type EntertainmentGenreMaxAggregateOutputType = {
  id: number | null
  genre: $Enums.Genre | null
  movieId: number | null
  showId: number | null
}

export type EntertainmentGenreCountAggregateOutputType = {
  id: number
  genre: number
  movieId: number
  showId: number
  _all: number
}


export type EntertainmentGenreAvgAggregateInputType = {
  id?: true
  movieId?: true
  showId?: true
}

export type EntertainmentGenreSumAggregateInputType = {
  id?: true
  movieId?: true
  showId?: true
}

export type EntertainmentGenreMinAggregateInputType = {
  id?: true
  genre?: true
  movieId?: true
  showId?: true
}

export type EntertainmentGenreMaxAggregateInputType = {
  id?: true
  genre?: true
  movieId?: true
  showId?: true
}

export type EntertainmentGenreCountAggregateInputType = {
  id?: true
  genre?: true
  movieId?: true
  showId?: true
  _all?: true
}

export type EntertainmentGenreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EntertainmentGenre to aggregate.
   */
  where?: Prisma.EntertainmentGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentGenres to fetch.
   */
  orderBy?: Prisma.EntertainmentGenreOrderByWithRelationInput | Prisma.EntertainmentGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EntertainmentGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentGenres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EntertainmentGenres
  **/
  _count?: true | EntertainmentGenreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EntertainmentGenreAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EntertainmentGenreSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EntertainmentGenreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EntertainmentGenreMaxAggregateInputType
}

export type GetEntertainmentGenreAggregateType<T extends EntertainmentGenreAggregateArgs> = {
      [P in keyof T & keyof AggregateEntertainmentGenre]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEntertainmentGenre[P]>
    : Prisma.GetScalarType<T[P], AggregateEntertainmentGenre[P]>
}




export type EntertainmentGenreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EntertainmentGenreWhereInput
  orderBy?: Prisma.EntertainmentGenreOrderByWithAggregationInput | Prisma.EntertainmentGenreOrderByWithAggregationInput[]
  by: Prisma.EntertainmentGenreScalarFieldEnum[] | Prisma.EntertainmentGenreScalarFieldEnum
  having?: Prisma.EntertainmentGenreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EntertainmentGenreCountAggregateInputType | true
  _avg?: EntertainmentGenreAvgAggregateInputType
  _sum?: EntertainmentGenreSumAggregateInputType
  _min?: EntertainmentGenreMinAggregateInputType
  _max?: EntertainmentGenreMaxAggregateInputType
}

export type EntertainmentGenreGroupByOutputType = {
  id: number
  genre: $Enums.Genre
  movieId: number | null
  showId: number | null
  _count: EntertainmentGenreCountAggregateOutputType | null
  _avg: EntertainmentGenreAvgAggregateOutputType | null
  _sum: EntertainmentGenreSumAggregateOutputType | null
  _min: EntertainmentGenreMinAggregateOutputType | null
  _max: EntertainmentGenreMaxAggregateOutputType | null
}

type GetEntertainmentGenreGroupByPayload<T extends EntertainmentGenreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EntertainmentGenreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EntertainmentGenreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EntertainmentGenreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EntertainmentGenreGroupByOutputType[P]>
      }
    >
  > 



export type EntertainmentGenreWhereInput = {
  AND?: Prisma.EntertainmentGenreWhereInput | Prisma.EntertainmentGenreWhereInput[]
  OR?: Prisma.EntertainmentGenreWhereInput[]
  NOT?: Prisma.EntertainmentGenreWhereInput | Prisma.EntertainmentGenreWhereInput[]
  id?: Prisma.IntFilter<"EntertainmentGenre"> | number
  genre?: Prisma.EnumGenreFilter<"EntertainmentGenre"> | $Enums.Genre
  movieId?: Prisma.IntNullableFilter<"EntertainmentGenre"> | number | null
  showId?: Prisma.IntNullableFilter<"EntertainmentGenre"> | number | null
  movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
  show?: Prisma.XOR<Prisma.ShowNullableScalarRelationFilter, Prisma.ShowWhereInput> | null
}

export type EntertainmentGenreOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  movieId?: Prisma.SortOrderInput | Prisma.SortOrder
  showId?: Prisma.SortOrderInput | Prisma.SortOrder
  movie?: Prisma.MovieOrderByWithRelationInput
  show?: Prisma.ShowOrderByWithRelationInput
}

export type EntertainmentGenreWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EntertainmentGenreWhereInput | Prisma.EntertainmentGenreWhereInput[]
  OR?: Prisma.EntertainmentGenreWhereInput[]
  NOT?: Prisma.EntertainmentGenreWhereInput | Prisma.EntertainmentGenreWhereInput[]
  genre?: Prisma.EnumGenreFilter<"EntertainmentGenre"> | $Enums.Genre
  movieId?: Prisma.IntNullableFilter<"EntertainmentGenre"> | number | null
  showId?: Prisma.IntNullableFilter<"EntertainmentGenre"> | number | null
  movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
  show?: Prisma.XOR<Prisma.ShowNullableScalarRelationFilter, Prisma.ShowWhereInput> | null
}, "id">

export type EntertainmentGenreOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  movieId?: Prisma.SortOrderInput | Prisma.SortOrder
  showId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.EntertainmentGenreCountOrderByAggregateInput
  _avg?: Prisma.EntertainmentGenreAvgOrderByAggregateInput
  _max?: Prisma.EntertainmentGenreMaxOrderByAggregateInput
  _min?: Prisma.EntertainmentGenreMinOrderByAggregateInput
  _sum?: Prisma.EntertainmentGenreSumOrderByAggregateInput
}

export type EntertainmentGenreScalarWhereWithAggregatesInput = {
  AND?: Prisma.EntertainmentGenreScalarWhereWithAggregatesInput | Prisma.EntertainmentGenreScalarWhereWithAggregatesInput[]
  OR?: Prisma.EntertainmentGenreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EntertainmentGenreScalarWhereWithAggregatesInput | Prisma.EntertainmentGenreScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EntertainmentGenre"> | number
  genre?: Prisma.EnumGenreWithAggregatesFilter<"EntertainmentGenre"> | $Enums.Genre
  movieId?: Prisma.IntNullableWithAggregatesFilter<"EntertainmentGenre"> | number | null
  showId?: Prisma.IntNullableWithAggregatesFilter<"EntertainmentGenre"> | number | null
}

export type EntertainmentGenreCreateInput = {
  genre: $Enums.Genre
  movie?: Prisma.MovieCreateNestedOneWithoutGenresInput
  show?: Prisma.ShowCreateNestedOneWithoutGenresInput
}

export type EntertainmentGenreUncheckedCreateInput = {
  id?: number
  genre: $Enums.Genre
  movieId?: number | null
  showId?: number | null
}

export type EntertainmentGenreUpdateInput = {
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  movie?: Prisma.MovieUpdateOneWithoutGenresNestedInput
  show?: Prisma.ShowUpdateOneWithoutGenresNestedInput
}

export type EntertainmentGenreUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  movieId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  showId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EntertainmentGenreCreateManyInput = {
  id?: number
  genre: $Enums.Genre
  movieId?: number | null
  showId?: number | null
}

export type EntertainmentGenreUpdateManyMutationInput = {
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
}

export type EntertainmentGenreUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  movieId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  showId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EntertainmentGenreListRelationFilter = {
  every?: Prisma.EntertainmentGenreWhereInput
  some?: Prisma.EntertainmentGenreWhereInput
  none?: Prisma.EntertainmentGenreWhereInput
}

export type EntertainmentGenreOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EntertainmentGenreCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
}

export type EntertainmentGenreAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
}

export type EntertainmentGenreMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
}

export type EntertainmentGenreMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
}

export type EntertainmentGenreSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
}

export type EntertainmentGenreCreateNestedManyWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput> | Prisma.EntertainmentGenreCreateWithoutMovieInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput | Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyMovieInputEnvelope
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
}

export type EntertainmentGenreUncheckedCreateNestedManyWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput> | Prisma.EntertainmentGenreCreateWithoutMovieInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput | Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyMovieInputEnvelope
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
}

export type EntertainmentGenreUpdateManyWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput> | Prisma.EntertainmentGenreCreateWithoutMovieInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput | Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput[]
  upsert?: Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutMovieInput | Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutMovieInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyMovieInputEnvelope
  set?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  disconnect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  delete?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  update?: Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutMovieInput | Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutMovieInput[]
  updateMany?: Prisma.EntertainmentGenreUpdateManyWithWhereWithoutMovieInput | Prisma.EntertainmentGenreUpdateManyWithWhereWithoutMovieInput[]
  deleteMany?: Prisma.EntertainmentGenreScalarWhereInput | Prisma.EntertainmentGenreScalarWhereInput[]
}

export type EntertainmentGenreUncheckedUpdateManyWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput> | Prisma.EntertainmentGenreCreateWithoutMovieInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput | Prisma.EntertainmentGenreCreateOrConnectWithoutMovieInput[]
  upsert?: Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutMovieInput | Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutMovieInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyMovieInputEnvelope
  set?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  disconnect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  delete?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  update?: Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutMovieInput | Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutMovieInput[]
  updateMany?: Prisma.EntertainmentGenreUpdateManyWithWhereWithoutMovieInput | Prisma.EntertainmentGenreUpdateManyWithWhereWithoutMovieInput[]
  deleteMany?: Prisma.EntertainmentGenreScalarWhereInput | Prisma.EntertainmentGenreScalarWhereInput[]
}

export type EntertainmentGenreCreateNestedManyWithoutShowInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutShowInput, Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput> | Prisma.EntertainmentGenreCreateWithoutShowInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput | Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyShowInputEnvelope
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
}

export type EntertainmentGenreUncheckedCreateNestedManyWithoutShowInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutShowInput, Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput> | Prisma.EntertainmentGenreCreateWithoutShowInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput | Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyShowInputEnvelope
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
}

export type EntertainmentGenreUpdateManyWithoutShowNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutShowInput, Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput> | Prisma.EntertainmentGenreCreateWithoutShowInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput | Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput[]
  upsert?: Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutShowInput | Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutShowInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyShowInputEnvelope
  set?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  disconnect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  delete?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  update?: Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutShowInput | Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutShowInput[]
  updateMany?: Prisma.EntertainmentGenreUpdateManyWithWhereWithoutShowInput | Prisma.EntertainmentGenreUpdateManyWithWhereWithoutShowInput[]
  deleteMany?: Prisma.EntertainmentGenreScalarWhereInput | Prisma.EntertainmentGenreScalarWhereInput[]
}

export type EntertainmentGenreUncheckedUpdateManyWithoutShowNestedInput = {
  create?: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutShowInput, Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput> | Prisma.EntertainmentGenreCreateWithoutShowInput[] | Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput | Prisma.EntertainmentGenreCreateOrConnectWithoutShowInput[]
  upsert?: Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutShowInput | Prisma.EntertainmentGenreUpsertWithWhereUniqueWithoutShowInput[]
  createMany?: Prisma.EntertainmentGenreCreateManyShowInputEnvelope
  set?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  disconnect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  delete?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  connect?: Prisma.EntertainmentGenreWhereUniqueInput | Prisma.EntertainmentGenreWhereUniqueInput[]
  update?: Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutShowInput | Prisma.EntertainmentGenreUpdateWithWhereUniqueWithoutShowInput[]
  updateMany?: Prisma.EntertainmentGenreUpdateManyWithWhereWithoutShowInput | Prisma.EntertainmentGenreUpdateManyWithWhereWithoutShowInput[]
  deleteMany?: Prisma.EntertainmentGenreScalarWhereInput | Prisma.EntertainmentGenreScalarWhereInput[]
}

export type EnumGenreFieldUpdateOperationsInput = {
  set?: $Enums.Genre
}

export type EntertainmentGenreCreateWithoutMovieInput = {
  genre: $Enums.Genre
  show?: Prisma.ShowCreateNestedOneWithoutGenresInput
}

export type EntertainmentGenreUncheckedCreateWithoutMovieInput = {
  id?: number
  genre: $Enums.Genre
  showId?: number | null
}

export type EntertainmentGenreCreateOrConnectWithoutMovieInput = {
  where: Prisma.EntertainmentGenreWhereUniqueInput
  create: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput>
}

export type EntertainmentGenreCreateManyMovieInputEnvelope = {
  data: Prisma.EntertainmentGenreCreateManyMovieInput | Prisma.EntertainmentGenreCreateManyMovieInput[]
}

export type EntertainmentGenreUpsertWithWhereUniqueWithoutMovieInput = {
  where: Prisma.EntertainmentGenreWhereUniqueInput
  update: Prisma.XOR<Prisma.EntertainmentGenreUpdateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedUpdateWithoutMovieInput>
  create: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedCreateWithoutMovieInput>
}

export type EntertainmentGenreUpdateWithWhereUniqueWithoutMovieInput = {
  where: Prisma.EntertainmentGenreWhereUniqueInput
  data: Prisma.XOR<Prisma.EntertainmentGenreUpdateWithoutMovieInput, Prisma.EntertainmentGenreUncheckedUpdateWithoutMovieInput>
}

export type EntertainmentGenreUpdateManyWithWhereWithoutMovieInput = {
  where: Prisma.EntertainmentGenreScalarWhereInput
  data: Prisma.XOR<Prisma.EntertainmentGenreUpdateManyMutationInput, Prisma.EntertainmentGenreUncheckedUpdateManyWithoutMovieInput>
}

export type EntertainmentGenreScalarWhereInput = {
  AND?: Prisma.EntertainmentGenreScalarWhereInput | Prisma.EntertainmentGenreScalarWhereInput[]
  OR?: Prisma.EntertainmentGenreScalarWhereInput[]
  NOT?: Prisma.EntertainmentGenreScalarWhereInput | Prisma.EntertainmentGenreScalarWhereInput[]
  id?: Prisma.IntFilter<"EntertainmentGenre"> | number
  genre?: Prisma.EnumGenreFilter<"EntertainmentGenre"> | $Enums.Genre
  movieId?: Prisma.IntNullableFilter<"EntertainmentGenre"> | number | null
  showId?: Prisma.IntNullableFilter<"EntertainmentGenre"> | number | null
}

export type EntertainmentGenreCreateWithoutShowInput = {
  genre: $Enums.Genre
  movie?: Prisma.MovieCreateNestedOneWithoutGenresInput
}

export type EntertainmentGenreUncheckedCreateWithoutShowInput = {
  id?: number
  genre: $Enums.Genre
  movieId?: number | null
}

export type EntertainmentGenreCreateOrConnectWithoutShowInput = {
  where: Prisma.EntertainmentGenreWhereUniqueInput
  create: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutShowInput, Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput>
}

export type EntertainmentGenreCreateManyShowInputEnvelope = {
  data: Prisma.EntertainmentGenreCreateManyShowInput | Prisma.EntertainmentGenreCreateManyShowInput[]
}

export type EntertainmentGenreUpsertWithWhereUniqueWithoutShowInput = {
  where: Prisma.EntertainmentGenreWhereUniqueInput
  update: Prisma.XOR<Prisma.EntertainmentGenreUpdateWithoutShowInput, Prisma.EntertainmentGenreUncheckedUpdateWithoutShowInput>
  create: Prisma.XOR<Prisma.EntertainmentGenreCreateWithoutShowInput, Prisma.EntertainmentGenreUncheckedCreateWithoutShowInput>
}

export type EntertainmentGenreUpdateWithWhereUniqueWithoutShowInput = {
  where: Prisma.EntertainmentGenreWhereUniqueInput
  data: Prisma.XOR<Prisma.EntertainmentGenreUpdateWithoutShowInput, Prisma.EntertainmentGenreUncheckedUpdateWithoutShowInput>
}

export type EntertainmentGenreUpdateManyWithWhereWithoutShowInput = {
  where: Prisma.EntertainmentGenreScalarWhereInput
  data: Prisma.XOR<Prisma.EntertainmentGenreUpdateManyMutationInput, Prisma.EntertainmentGenreUncheckedUpdateManyWithoutShowInput>
}

export type EntertainmentGenreCreateManyMovieInput = {
  id?: number
  genre: $Enums.Genre
  showId?: number | null
}

export type EntertainmentGenreUpdateWithoutMovieInput = {
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  show?: Prisma.ShowUpdateOneWithoutGenresNestedInput
}

export type EntertainmentGenreUncheckedUpdateWithoutMovieInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  showId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EntertainmentGenreUncheckedUpdateManyWithoutMovieInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  showId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EntertainmentGenreCreateManyShowInput = {
  id?: number
  genre: $Enums.Genre
  movieId?: number | null
}

export type EntertainmentGenreUpdateWithoutShowInput = {
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  movie?: Prisma.MovieUpdateOneWithoutGenresNestedInput
}

export type EntertainmentGenreUncheckedUpdateWithoutShowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  movieId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EntertainmentGenreUncheckedUpdateManyWithoutShowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  genre?: Prisma.EnumGenreFieldUpdateOperationsInput | $Enums.Genre
  movieId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type EntertainmentGenreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  genre?: boolean
  movieId?: boolean
  showId?: boolean
  movie?: boolean | Prisma.EntertainmentGenre$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentGenre$showArgs<ExtArgs>
}, ExtArgs["result"]["entertainmentGenre"]>

export type EntertainmentGenreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  genre?: boolean
  movieId?: boolean
  showId?: boolean
  movie?: boolean | Prisma.EntertainmentGenre$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentGenre$showArgs<ExtArgs>
}, ExtArgs["result"]["entertainmentGenre"]>

export type EntertainmentGenreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  genre?: boolean
  movieId?: boolean
  showId?: boolean
  movie?: boolean | Prisma.EntertainmentGenre$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentGenre$showArgs<ExtArgs>
}, ExtArgs["result"]["entertainmentGenre"]>

export type EntertainmentGenreSelectScalar = {
  id?: boolean
  genre?: boolean
  movieId?: boolean
  showId?: boolean
}

export type EntertainmentGenreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "genre" | "movieId" | "showId", ExtArgs["result"]["entertainmentGenre"]>
export type EntertainmentGenreInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  movie?: boolean | Prisma.EntertainmentGenre$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentGenre$showArgs<ExtArgs>
}
export type EntertainmentGenreIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  movie?: boolean | Prisma.EntertainmentGenre$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentGenre$showArgs<ExtArgs>
}
export type EntertainmentGenreIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  movie?: boolean | Prisma.EntertainmentGenre$movieArgs<ExtArgs>
  show?: boolean | Prisma.EntertainmentGenre$showArgs<ExtArgs>
}

export type $EntertainmentGenrePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EntertainmentGenre"
  objects: {
    movie: Prisma.$MoviePayload<ExtArgs> | null
    show: Prisma.$ShowPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    genre: $Enums.Genre
    movieId: number | null
    showId: number | null
  }, ExtArgs["result"]["entertainmentGenre"]>
  composites: {}
}

export type EntertainmentGenreGetPayload<S extends boolean | null | undefined | EntertainmentGenreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload, S>

export type EntertainmentGenreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EntertainmentGenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EntertainmentGenreCountAggregateInputType | true
  }

export interface EntertainmentGenreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EntertainmentGenre'], meta: { name: 'EntertainmentGenre' } }
  /**
   * Find zero or one EntertainmentGenre that matches the filter.
   * @param {EntertainmentGenreFindUniqueArgs} args - Arguments to find a EntertainmentGenre
   * @example
   * // Get one EntertainmentGenre
   * const entertainmentGenre = await prisma.entertainmentGenre.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EntertainmentGenreFindUniqueArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EntertainmentGenre that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EntertainmentGenreFindUniqueOrThrowArgs} args - Arguments to find a EntertainmentGenre
   * @example
   * // Get one EntertainmentGenre
   * const entertainmentGenre = await prisma.entertainmentGenre.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EntertainmentGenreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EntertainmentGenre that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentGenreFindFirstArgs} args - Arguments to find a EntertainmentGenre
   * @example
   * // Get one EntertainmentGenre
   * const entertainmentGenre = await prisma.entertainmentGenre.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EntertainmentGenreFindFirstArgs>(args?: Prisma.SelectSubset<T, EntertainmentGenreFindFirstArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EntertainmentGenre that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentGenreFindFirstOrThrowArgs} args - Arguments to find a EntertainmentGenre
   * @example
   * // Get one EntertainmentGenre
   * const entertainmentGenre = await prisma.entertainmentGenre.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EntertainmentGenreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EntertainmentGenreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EntertainmentGenres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentGenreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EntertainmentGenres
   * const entertainmentGenres = await prisma.entertainmentGenre.findMany()
   * 
   * // Get first 10 EntertainmentGenres
   * const entertainmentGenres = await prisma.entertainmentGenre.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const entertainmentGenreWithIdOnly = await prisma.entertainmentGenre.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EntertainmentGenreFindManyArgs>(args?: Prisma.SelectSubset<T, EntertainmentGenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EntertainmentGenre.
   * @param {EntertainmentGenreCreateArgs} args - Arguments to create a EntertainmentGenre.
   * @example
   * // Create one EntertainmentGenre
   * const EntertainmentGenre = await prisma.entertainmentGenre.create({
   *   data: {
   *     // ... data to create a EntertainmentGenre
   *   }
   * })
   * 
   */
  create<T extends EntertainmentGenreCreateArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreCreateArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EntertainmentGenres.
   * @param {EntertainmentGenreCreateManyArgs} args - Arguments to create many EntertainmentGenres.
   * @example
   * // Create many EntertainmentGenres
   * const entertainmentGenre = await prisma.entertainmentGenre.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EntertainmentGenreCreateManyArgs>(args?: Prisma.SelectSubset<T, EntertainmentGenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EntertainmentGenres and returns the data saved in the database.
   * @param {EntertainmentGenreCreateManyAndReturnArgs} args - Arguments to create many EntertainmentGenres.
   * @example
   * // Create many EntertainmentGenres
   * const entertainmentGenre = await prisma.entertainmentGenre.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EntertainmentGenres and only return the `id`
   * const entertainmentGenreWithIdOnly = await prisma.entertainmentGenre.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EntertainmentGenreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EntertainmentGenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EntertainmentGenre.
   * @param {EntertainmentGenreDeleteArgs} args - Arguments to delete one EntertainmentGenre.
   * @example
   * // Delete one EntertainmentGenre
   * const EntertainmentGenre = await prisma.entertainmentGenre.delete({
   *   where: {
   *     // ... filter to delete one EntertainmentGenre
   *   }
   * })
   * 
   */
  delete<T extends EntertainmentGenreDeleteArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreDeleteArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EntertainmentGenre.
   * @param {EntertainmentGenreUpdateArgs} args - Arguments to update one EntertainmentGenre.
   * @example
   * // Update one EntertainmentGenre
   * const entertainmentGenre = await prisma.entertainmentGenre.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EntertainmentGenreUpdateArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreUpdateArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EntertainmentGenres.
   * @param {EntertainmentGenreDeleteManyArgs} args - Arguments to filter EntertainmentGenres to delete.
   * @example
   * // Delete a few EntertainmentGenres
   * const { count } = await prisma.entertainmentGenre.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EntertainmentGenreDeleteManyArgs>(args?: Prisma.SelectSubset<T, EntertainmentGenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EntertainmentGenres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentGenreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EntertainmentGenres
   * const entertainmentGenre = await prisma.entertainmentGenre.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EntertainmentGenreUpdateManyArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EntertainmentGenres and returns the data updated in the database.
   * @param {EntertainmentGenreUpdateManyAndReturnArgs} args - Arguments to update many EntertainmentGenres.
   * @example
   * // Update many EntertainmentGenres
   * const entertainmentGenre = await prisma.entertainmentGenre.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EntertainmentGenres and only return the `id`
   * const entertainmentGenreWithIdOnly = await prisma.entertainmentGenre.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EntertainmentGenreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EntertainmentGenre.
   * @param {EntertainmentGenreUpsertArgs} args - Arguments to update or create a EntertainmentGenre.
   * @example
   * // Update or create a EntertainmentGenre
   * const entertainmentGenre = await prisma.entertainmentGenre.upsert({
   *   create: {
   *     // ... data to create a EntertainmentGenre
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EntertainmentGenre we want to update
   *   }
   * })
   */
  upsert<T extends EntertainmentGenreUpsertArgs>(args: Prisma.SelectSubset<T, EntertainmentGenreUpsertArgs<ExtArgs>>): Prisma.Prisma__EntertainmentGenreClient<runtime.Types.Result.GetResult<Prisma.$EntertainmentGenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EntertainmentGenres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentGenreCountArgs} args - Arguments to filter EntertainmentGenres to count.
   * @example
   * // Count the number of EntertainmentGenres
   * const count = await prisma.entertainmentGenre.count({
   *   where: {
   *     // ... the filter for the EntertainmentGenres we want to count
   *   }
   * })
  **/
  count<T extends EntertainmentGenreCountArgs>(
    args?: Prisma.Subset<T, EntertainmentGenreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EntertainmentGenreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EntertainmentGenre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentGenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EntertainmentGenreAggregateArgs>(args: Prisma.Subset<T, EntertainmentGenreAggregateArgs>): Prisma.PrismaPromise<GetEntertainmentGenreAggregateType<T>>

  /**
   * Group by EntertainmentGenre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntertainmentGenreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EntertainmentGenreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EntertainmentGenreGroupByArgs['orderBy'] }
      : { orderBy?: EntertainmentGenreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EntertainmentGenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntertainmentGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EntertainmentGenre model
 */
readonly fields: EntertainmentGenreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EntertainmentGenre.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EntertainmentGenreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  movie<T extends Prisma.EntertainmentGenre$movieArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EntertainmentGenre$movieArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  show<T extends Prisma.EntertainmentGenre$showArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EntertainmentGenre$showArgs<ExtArgs>>): Prisma.Prisma__ShowClient<runtime.Types.Result.GetResult<Prisma.$ShowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EntertainmentGenre model
 */
export interface EntertainmentGenreFieldRefs {
  readonly id: Prisma.FieldRef<"EntertainmentGenre", 'Int'>
  readonly genre: Prisma.FieldRef<"EntertainmentGenre", 'Genre'>
  readonly movieId: Prisma.FieldRef<"EntertainmentGenre", 'Int'>
  readonly showId: Prisma.FieldRef<"EntertainmentGenre", 'Int'>
}
    

// Custom InputTypes
/**
 * EntertainmentGenre findUnique
 */
export type EntertainmentGenreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentGenre to fetch.
   */
  where: Prisma.EntertainmentGenreWhereUniqueInput
}

/**
 * EntertainmentGenre findUniqueOrThrow
 */
export type EntertainmentGenreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentGenre to fetch.
   */
  where: Prisma.EntertainmentGenreWhereUniqueInput
}

/**
 * EntertainmentGenre findFirst
 */
export type EntertainmentGenreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentGenre to fetch.
   */
  where?: Prisma.EntertainmentGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentGenres to fetch.
   */
  orderBy?: Prisma.EntertainmentGenreOrderByWithRelationInput | Prisma.EntertainmentGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EntertainmentGenres.
   */
  cursor?: Prisma.EntertainmentGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentGenres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EntertainmentGenres.
   */
  distinct?: Prisma.EntertainmentGenreScalarFieldEnum | Prisma.EntertainmentGenreScalarFieldEnum[]
}

/**
 * EntertainmentGenre findFirstOrThrow
 */
export type EntertainmentGenreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentGenre to fetch.
   */
  where?: Prisma.EntertainmentGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentGenres to fetch.
   */
  orderBy?: Prisma.EntertainmentGenreOrderByWithRelationInput | Prisma.EntertainmentGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EntertainmentGenres.
   */
  cursor?: Prisma.EntertainmentGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentGenres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EntertainmentGenres.
   */
  distinct?: Prisma.EntertainmentGenreScalarFieldEnum | Prisma.EntertainmentGenreScalarFieldEnum[]
}

/**
 * EntertainmentGenre findMany
 */
export type EntertainmentGenreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * Filter, which EntertainmentGenres to fetch.
   */
  where?: Prisma.EntertainmentGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntertainmentGenres to fetch.
   */
  orderBy?: Prisma.EntertainmentGenreOrderByWithRelationInput | Prisma.EntertainmentGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EntertainmentGenres.
   */
  cursor?: Prisma.EntertainmentGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntertainmentGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntertainmentGenres.
   */
  skip?: number
  distinct?: Prisma.EntertainmentGenreScalarFieldEnum | Prisma.EntertainmentGenreScalarFieldEnum[]
}

/**
 * EntertainmentGenre create
 */
export type EntertainmentGenreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * The data needed to create a EntertainmentGenre.
   */
  data: Prisma.XOR<Prisma.EntertainmentGenreCreateInput, Prisma.EntertainmentGenreUncheckedCreateInput>
}

/**
 * EntertainmentGenre createMany
 */
export type EntertainmentGenreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EntertainmentGenres.
   */
  data: Prisma.EntertainmentGenreCreateManyInput | Prisma.EntertainmentGenreCreateManyInput[]
}

/**
 * EntertainmentGenre createManyAndReturn
 */
export type EntertainmentGenreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * The data used to create many EntertainmentGenres.
   */
  data: Prisma.EntertainmentGenreCreateManyInput | Prisma.EntertainmentGenreCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EntertainmentGenre update
 */
export type EntertainmentGenreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * The data needed to update a EntertainmentGenre.
   */
  data: Prisma.XOR<Prisma.EntertainmentGenreUpdateInput, Prisma.EntertainmentGenreUncheckedUpdateInput>
  /**
   * Choose, which EntertainmentGenre to update.
   */
  where: Prisma.EntertainmentGenreWhereUniqueInput
}

/**
 * EntertainmentGenre updateMany
 */
export type EntertainmentGenreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EntertainmentGenres.
   */
  data: Prisma.XOR<Prisma.EntertainmentGenreUpdateManyMutationInput, Prisma.EntertainmentGenreUncheckedUpdateManyInput>
  /**
   * Filter which EntertainmentGenres to update
   */
  where?: Prisma.EntertainmentGenreWhereInput
  /**
   * Limit how many EntertainmentGenres to update.
   */
  limit?: number
}

/**
 * EntertainmentGenre updateManyAndReturn
 */
export type EntertainmentGenreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * The data used to update EntertainmentGenres.
   */
  data: Prisma.XOR<Prisma.EntertainmentGenreUpdateManyMutationInput, Prisma.EntertainmentGenreUncheckedUpdateManyInput>
  /**
   * Filter which EntertainmentGenres to update
   */
  where?: Prisma.EntertainmentGenreWhereInput
  /**
   * Limit how many EntertainmentGenres to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EntertainmentGenre upsert
 */
export type EntertainmentGenreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * The filter to search for the EntertainmentGenre to update in case it exists.
   */
  where: Prisma.EntertainmentGenreWhereUniqueInput
  /**
   * In case the EntertainmentGenre found by the `where` argument doesn't exist, create a new EntertainmentGenre with this data.
   */
  create: Prisma.XOR<Prisma.EntertainmentGenreCreateInput, Prisma.EntertainmentGenreUncheckedCreateInput>
  /**
   * In case the EntertainmentGenre was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EntertainmentGenreUpdateInput, Prisma.EntertainmentGenreUncheckedUpdateInput>
}

/**
 * EntertainmentGenre delete
 */
export type EntertainmentGenreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
  /**
   * Filter which EntertainmentGenre to delete.
   */
  where: Prisma.EntertainmentGenreWhereUniqueInput
}

/**
 * EntertainmentGenre deleteMany
 */
export type EntertainmentGenreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EntertainmentGenres to delete
   */
  where?: Prisma.EntertainmentGenreWhereInput
  /**
   * Limit how many EntertainmentGenres to delete.
   */
  limit?: number
}

/**
 * EntertainmentGenre.movie
 */
export type EntertainmentGenre$movieArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  where?: Prisma.MovieWhereInput
}

/**
 * EntertainmentGenre.show
 */
export type EntertainmentGenre$showArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Show
   */
  select?: Prisma.ShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Show
   */
  omit?: Prisma.ShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShowInclude<ExtArgs> | null
  where?: Prisma.ShowWhereInput
}

/**
 * EntertainmentGenre without action
 */
export type EntertainmentGenreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntertainmentGenre
   */
  select?: Prisma.EntertainmentGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntertainmentGenre
   */
  omit?: Prisma.EntertainmentGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntertainmentGenreInclude<ExtArgs> | null
}
